#cloud-config

package_update: true
package_upgrade: true

write_files:
  - path: /etc/ssl/app/cert.pem
    owner: root
    permissions: 0400
    content: |
      -----BEGIN CERTIFICATE-----
      MIIEOTCCAyGgAwIBAgIQDEXDrdcBK02eQvKMq/MowDANBgkqhkiG9w0BAQsFADCB
      -----END CERTIFICATE-----

  - path: /etc/ssl/app/key.pem
    owner: root
    permissions: 0400
    content: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEogIBAAKCAQEAxJV2VGRhYsHqkTZAYeBTif9ost+eBBr5BGGJnuPdcyoXcYeY
      -----END RSA PRIVATE KEY-----

  - path: /var/lib/spoke/app1/.dockerignore
    owner: root
    permissions: 0744
    content: |
      Dockerfile
      docker-compose*
      .gitignore
      pyvenv.cfg
      tests
      node_modules/
      npm-debug.log
      bin/
      include/
      lib/
      lib64/

  - path: /var/lib/spoke/app1/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine

      WORKDIR /app
      COPY . .
      RUN pip install --verbose --no-cache-dir -r requirements.txt
      EXPOSE 8080

      CMD ["python3", "app.py"]

  - path: /var/lib/spoke/app1/app.py
    owner: root
    permissions: 0744
    content: |
      import os
      import socket
      from flask import Flask, request

      app = Flask(__name__)

      hostname = socket.gethostname()
      address = socket.gethostbyname(hostname)

      @app.route("/")
      def default():
          data_dict = {
              'app': 'APP1',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict

      @app.route("/path1")
      def path1():
          data_dict = {
              'app': 'APP1-PATH1',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict

      @app.route("/path2")
      def path2():
          data_dict = {
              'app': 'APP1-PATH2',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict

      @app.route("/healthz")
      def healthz():
          return "OK"

      if __name__ == "__main__":
          app.run(host='0.0.0.0', port=8080, debug=True)

  - path: /var/lib/spoke/app1/requirements.txt
    owner: root
    permissions: 0744
    content: |
      Flask==3.0.0

  - path: /var/lib/spoke/app2/.dockerignore
    owner: root
    permissions: 0744
    content: |
      Dockerfile
      docker-compose*
      .gitignore
      pyvenv.cfg
      tests
      node_modules/
      npm-debug.log
      bin/
      include/
      lib/
      lib64/

  - path: /var/lib/spoke/app2/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine

      WORKDIR /app
      COPY . .
      RUN pip install --verbose --no-cache-dir -r requirements.txt
      EXPOSE 8081

      CMD ["python3", "app.py"]

