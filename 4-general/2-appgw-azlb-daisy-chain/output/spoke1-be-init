#cloud-config

package_update: true


write_files:
  - path: /etc/ssl/app/cert.key
    owner: root
    permissions: 0400
    content: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEA1ufDkCJ/oR9sffqxIQxllB+ZUSDR3WHR/6gbb7526/uSot8q
      9+5z5rdjGu1Y+t6T+K0tHYogWPplfPL+FykUMpO+Ku+Sp/HkXIbg121U9LKtHSUL
      7jvvejtopHDakYv/GSR8O9J+Y7GjgOJw/k/izwevEV5tCjesOior48e5hyZkXwXs
      HAQ99X4X6wZ5/cRctvihdygBGgNg+PwjK/nI9wNaSiGB4tODSk+ARVl1L8L039Cp
      vGW8YQzZURyPUXnLbzT3lCm88UQlcoR8+AnVgNEexqwQ+Fdpyv0x0Apaux2mLLtf
      2PzMwEfEVdoB3Mjum5qQQh1qLeI2M4l1N0Z+pQIDAQABAoIBAFRVQuMvBpK9+B8/
      336ulLYZ6Fpz3KdZmcUPvSSOw7A7WwHbPctpocXqNVP9zCs2aS7vFoM/Dw6bxHPS
      D3AbSLfITpoexZhuTkUZEOa5GtujuldzkEj+8C0xXxEY0EzJeWPuc2ouYjbRIO6U
      7e5+fuzrgQH54iReUJHKtsp+OAoWiLm2ejzt6+NO15OKr32NnQoVG6X/pp2I7tSM
      V7XzOzTuyXvWKdQSTSHZk+v0xwUeKGQ45epMcvqTvI/G0fIhPs3L0Zs/Qrn872q9
      mSUAoGhxpWEDo9tsXoJWg26+RtqWo5OeHJ4n8f+NmDZwOeRhF76h2uncggplq/AU
      cIelm8ECgYEA6s8EvTgHj/RdfSjN25RxM5XlsZMu/oBAYP0l2YGufHVEtMfMwf6W
      zl45TJzmxS6caUWe6OzuQVknwvUR+t5hpAnnB1PmLiDJQeeb5iySbUV+jD3M7Uzm
      ICNJdq4PCpwT/n6jbaLTLpD2ZTBv3IKuoDm+PB7j8WuILvOMFM9jPPkCgYEA6kzm
      4odK7ku3XFzJPenw40Ea1+PcN3wppKZhFdxvALHSutMaLtFh+51m/d7ewnXhd/gR
      mZlkb4N/e/ncLTIugGUjlGda4/1BzEXqmdWzmHqH2T38ky9fRXy63ER3NLgJnREA
      MXou86fn9btRvDDNo2m/kNczYXo6HLGP/qK3Fg0CgYEA0YDIb7PQO4cC6ys/EY4O
      usIh4SC7q2PvDRqRbNIiRvWyycIDVYu8LoEvisXruT9vWxY9RQIxSqkrqu1Sj41f
      fSdAtO8Mz1d9eooWNXbLZye8U5DIiWo1YbNaVsPSs9qylD2Vv7qpxkCdN4fSJuOK
      v3cF30qIgt048vtmnyKzHrECgYB9LKqpWYiRuQf0I2osVsCoWM8DiivLxNzmpzD1
      Ifh30Yj44PF7E8gaSiSM+zXdhGb51iFpA0diQEmqrXmQ999aHy6cCX/IkDRH8w58
      M2yoyMWtLW20ILnwgMvABB//nVcdf8ivpkxRRmIpqXLobNZgOI3sztwXdtp3G/IH
      I11XPQKBgQCi/aUDAM0iv2JvqW5gH6pJp9tfgSzWb+l4ScwYGPUxEhUX9g1X9nCh
      o0Zk3eQN5ZyioPBwW419hQTyMgACnt0ZFIqrn0KsH2XR+aUOJcj3vR/E3TCuGt2/
      ItxtxOoETML445l/CvC+j/hnjzG8xX2REUtqy/omAZzcx0e1c+XX5g==
      -----END RSA PRIVATE KEY-----
      
  - path: /etc/ssl/app/cert.pem
    owner: root
    permissions: 0400
    content: |
      -----BEGIN CERTIFICATE-----
      MIIEPTCCAyWgAwIBAgIRALMrSLbS1hPPPEQtLa1zvTswDQYJKoZIhvcNAQELBQAw
      gY8xCzAJBgNVBAYTAlVLMRAwDgYDVQQIEwdFbmdsYW5kMQ8wDQYDVQQHEwZMb25k
      b24xGjAYBgNVBAkTEW1wbHMgY2hpY2tlbiByb2FkMQ0wCwYDVQQKEwRkZW1vMRsw
      GQYDVQQLExJjbG91ZCBuZXR3b3JrIHRlYW0xFTATBgNVBAMTDFNlbGYgUm9vdCBD
      QTAeFw0yMzEyMjExMDU0NDZaFw0yNDEyMjAxMDU0NDZaMIGrMQswCQYDVQQGEwJV
      SzEQMA4GA1UECBMHRW5nbGFuZDEPMA0GA1UEBxMGTG9uZG9uMTUwFgYDVQQJEw8g
      bmV0d29yayBhdmVudWUwGwYDVQQJExQ5OSBtcGxzIGNoaWNrZW4gcm9hZDESMBAG
      A1UEChMJYXBwMSBkZW1vMRowGAYDVQQLExFhcHAxIG5ldHdvcmsgdGVhbTESMBAG
      A1UEAwwJKi5hei5jb3JwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
      1ufDkCJ/oR9sffqxIQxllB+ZUSDR3WHR/6gbb7526/uSot8q9+5z5rdjGu1Y+t6T
      +K0tHYogWPplfPL+FykUMpO+Ku+Sp/HkXIbg121U9LKtHSUL7jvvejtopHDakYv/
      GSR8O9J+Y7GjgOJw/k/izwevEV5tCjesOior48e5hyZkXwXsHAQ99X4X6wZ5/cRc
      tvihdygBGgNg+PwjK/nI9wNaSiGB4tODSk+ARVl1L8L039CpvGW8YQzZURyPUXnL
      bzT3lCm88UQlcoR8+AnVgNEexqwQ+Fdpyv0x0Apaux2mLLtf2PzMwEfEVdoB3Mju
      m5qQQh1qLeI2M4l1N0Z+pQIDAQABo3YwdDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0l
      BBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgw
      FoAUUMqDCnnoJfk58kLYmKMQaglJ7eAwFAYDVR0RBA0wC4IJKi5hei5jb3JwMA0G
      CSqGSIb3DQEBCwUAA4IBAQC37+as5mngdycAnmcbiTFetP4i4+vhMU9TJHOjZs7W
      9E34dE1xSv/6LKiUs+JTtnBjH17zYOSg6Oi2YSSj2ZqLh2QRkAVlUYOnSaT+KjBB
      JtFEw/u3BNIaHLIf38Kgjafggq4gzDIKlNAvDaVyk2HzXm+dZ9Sxv/I3gBiNDiVz
      yY+ii5h5JNFmZ3DGT4wXieQf6cqkXzEbWfsijVUcdHyNSWY7bsfGkzOcPNQN/QJw
      BGjp5Ewi/Plb1lop9TYVJ5ZrFN13cvYuY6EiWkdiSOqkOyUejOOfUB/w7GpeZD9k
      RGf4mBc9YAHhLePItxUt3L9ubd+VUx8Fqreslv/FkJzj
      -----END CERTIFICATE-----
      
      -----BEGIN CERTIFICATE-----
      MIID7DCCAtSgAwIBAgIQEyjbVfQnbTCQ5vod6T7QlTANBgkqhkiG9w0BAQsFADCB
      jzELMAkGA1UEBhMCVUsxEDAOBgNVBAgTB0VuZ2xhbmQxDzANBgNVBAcTBkxvbmRv
      bjEaMBgGA1UECRMRbXBscyBjaGlja2VuIHJvYWQxDTALBgNVBAoTBGRlbW8xGzAZ
      BgNVBAsTEmNsb3VkIG5ldHdvcmsgdGVhbTEVMBMGA1UEAxMMU2VsZiBSb290IENB
      MB4XDTIzMTIyMTA4NTk0MloXDTI0MTIyMDA4NTk0MlowgY8xCzAJBgNVBAYTAlVL
      MRAwDgYDVQQIEwdFbmdsYW5kMQ8wDQYDVQQHEwZMb25kb24xGjAYBgNVBAkTEW1w
      bHMgY2hpY2tlbiByb2FkMQ0wCwYDVQQKEwRkZW1vMRswGQYDVQQLExJjbG91ZCBu
      ZXR3b3JrIHRlYW0xFTATBgNVBAMTDFNlbGYgUm9vdCBDQTCCASIwDQYJKoZIhvcN
      AQEBBQADggEPADCCAQoCggEBAMOh7JQY1YX8gjGwmNJQEqwrD/fy8anGJnUZGRLI
      WDvEmSP805urPzrzVD8DyAqNXxVA58kSGD39aZBng60AgEVBm3wLdOwXA5+nMkI3
      3O8wXDrRE/lR0+6ZG49ZZy2ZAbQhoXOaqwt4XoB46SQjlkUNbsnDu7HY1TKCuDib
      rV9pVw7ndV8MBfLe2o04RSGxMxxC35ZPWDEpOrvvTd55/IafRVBx2SwFMQXFFtFV
      KLEfkHoU6GYsiNARrbw4ZEdJ5JGdx+M8c1J5v2GZ7/MEYhTkdhldQe9DjNFsN/M6
      2JkOlAX+Dpcii1NHahWmqH9j2me2VcQEZTYY4e65gUVZ5ekCAwEAAaNCMEAwDgYD
      VR0PAQH/BAQDAgKkMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFFDKgwp56CX5
      OfJC2JijEGoJSe3gMA0GCSqGSIb3DQEBCwUAA4IBAQCfjCB6m/8kGJPFzEeQ3Yg8
      kpZcPIknhdiPALjKeVoAFg+UIfitWD5uhyxqWvbpxmTkiefiq5rA1unnfExTcs4i
      OvTyFHfPp8kOrtN+4QitpOOQ3J6xsV8KMWYzV/Cbnca/z/vU2EYlfuGcWFOO07X+
      RJTUu334k+8UEC/4mfJZbUqBVFhaptkCerx2EhPwDMBVkbK7pa75PGwu2mQHd3yl
      cOZPV1Qs8l6+5d/eBFRYm2bJWnfOuklBgEcSUkCE+h7T/BcmLXwLmTKGrBKCn9fD
      wKYUUz94tAjHkn2l/diABFpvI/Px+0EBGPb05RI5qbqFRXVMCAaaaxLANFB5V/jZ
      -----END CERTIFICATE-----
      
  - path: /var/lib/spoke/app1/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine
      
      WORKDIR /app
      COPY requirements.txt .
      RUN pip install --no-cache-dir -r requirements.txt
      COPY . .
      EXPOSE 8080
      
      CMD ["python", "app.py"]
      
  - path: /var/lib/spoke/app1/app.py
    owner: root
    permissions: 0744
    content: |
      import socket
      from flask import Flask, request
      app = Flask(__name__)
      
      @app.route("/")
      def default():
          data_dict = {
              'app': 'APP1',
              'hostname': os.getenv('HOST_HOSTNAME', 'Unknown'),
              'local-ip': os.getenv('HOST_IP', 'Unknown'),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @app.route("/path1")
      def path1():
          data_dict = {
              'app': 'APP1-PATH1',
              'hostname': os.getenv('HOST_HOSTNAME', 'Unknown'),
              'local-ip': os.getenv('HOST_IP', 'Unknown'),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @app.route("/path2")
      def path2():
          data_dict = {
              'app': 'APP1-PATH2',
              'hostname': os.getenv('HOST_HOSTNAME', 'Unknown'),
              'local-ip': os.getenv('HOST_IP', 'Unknown'),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @app.route("/healthz", host="healthz.az.corp")
      def healthz():
          return "OK"
      
      if __name__ == "__main__":
          cert_path = '/etc/ssl/app/cert.pem'
          key_path = '/etc/ssl/app/cert.key'
          app.run(host='0.0.0.0', port=8080, debug=True, ssl_context=(cert_path, key_path))
      
  - path: /var/lib/spoke/app1/dockerignore
    owner: root
    permissions: 0744
    content: |
      Dockerfile
      docker-compose*
      .gitignore
      pyvenv.cfg
      tests
      node_modules/
      npm-debug.log
      bin/
      include/
      lib/
      lib64/
      
  - path: /var/lib/spoke/app1/requirements.txt
    owner: root
    permissions: 0744
    content: |
      Flask==3.0.0
      
  - path: /var/lib/spoke/app2/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine
      
      WORKDIR /app
      COPY requirements.txt .
      RUN pip install --no-cache-dir -r requirements.txt
      COPY . .
      EXPOSE 8081
      
      CMD ["python", "app.py"]
      
  - path: /var/lib/spoke/app2/app.py
    owner: root
    permissions: 0744
    content: |
      import socket
      from flask import Flask, request
      app = Flask(__name__)
      
      @app.route("/")
      def default():
          data_dict = {
              'app': 'APP2',
              'hostname': os.getenv('HOST_HOSTNAME', 'Unknown'),
              'local-ip': os.getenv('HOST_IP', 'Unknown'),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @app.route("/path1")
      def path1():
          data_dict = {
              'app': 'APP2-PATH1',
              'hostname': os.getenv('HOST_HOSTNAME', 'Unknown'),
              'local-ip': os.getenv('HOST_IP', 'Unknown'),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @app.route("/path2")
      def path2():
          data_dict = {
              'app': 'APP2-PATH2',
              'hostname': os.getenv('HOST_HOSTNAME', 'Unknown'),
              'local-ip': os.getenv('HOST_IP', 'Unknown'),
              'remote-ip': request.remote_addr,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @app.route("/healthz", host="healthz.az.corp")
      def healthz():
          return "OK"
      
      if __name__ == "__main__":
          cert_path = '/etc/ssl/app/cert.pem'
          key_path = '/etc/ssl/app/cert.key'
          app.run(host='0.0.0.0', port=8080, debug=True, ssl_context=(cert_path, key_path))
      
  - path: /var/lib/spoke/app2/dockerignore
    owner: root
    permissions: 0744
    content: |
      Dockerfile
      docker-compose*
      .gitignore
      pyvenv.cfg
      tests
      node_modules/
      npm-debug.log
      bin/
      include/
      lib/
      lib64/
      
  - path: /var/lib/spoke/app2/requirements.txt
    owner: root
    permissions: 0744
    content: |
      Flask==3.0.0
      
  - path: /var/lib/spoke/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3'
      services:
        app1:
          container_name: app1
          build:
            context: ./app1
            dockerfile: Dockerfile
          ports:
            - 8080:8080
          volumes:
            - /etc/ssl/app/cert.pem:/etc/ssl/app/cert.pem
            - /etc/ssl/app/cert.key:/etc/ssl/app/cert.key
      
        app2:
          container_name: app2
          build:
            context: ./app2
            dockerfile: Dockerfile
          ports:
            - 8081:8081
      
        httpbin:
          image: kennethreitz/httpbin
          ports:
            - 80:80
      
  - path: /var/lib/spoke/service.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      set -e
      
      export HOST_HOSTNAME=$(hostname)
      export HOST_IP=$(hostname -I | awk '{print $1}')
      
      base_dir=$(pwd)
      init_dir="/var/lib/spoke"
      log_init="$init_dir/log_init.txt"
      
      if [ ! -d "$init_dir" ]; then mkdir -p "$init_dir"; fi
      
      echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf
      sysctl -p
      
      sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf
      
      cat <<EOF > /etc/motd
      ################################################
               Docker Multiport Application
      ################################################
      Docker Ubuntu
       Date:     $(date)
      - Version:  1.0
      - Distro:   $(cat /etc/issue)
      - Packages:
        - Docker
      ################################################
      
      EOF
      
      install_packages() {
          echo "*****************************************"
          echo " Step 0: Install packages"
          echo "*****************************************"
          apt-get update
          apt-get install -y python3-pip python3-dev tcpdump dnsutils net-tools nmap apache2-utils
      
          echo "*****************************************"
          echo " Step 1: Install docker"
          echo "*****************************************"
          apt-get update
          apt-get install -y ca-certificates curl gnupg lsb-release
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          echo ""
          docker version
          docker compose version
      
          echo "*****************************************"
          echo " Step 2: Cleanup apt"
          echo "*****************************************"
          apt-get --purge -y autoremove
          apt-get clean
          echo "done!"
      }
      
      start_services() {
        echo "**************************************"
        echo "STEP 1: Start Services"
        echo "**************************************"
        cd "$init_dir"
        echo "docker compose up -d"
        docker compose up -d
        cd "$dir_base"
      }
      
      check_services() {
        echo "**************************************"
        echo "STEP 2: Check Service Status"
        echo "**************************************"
        echo "sleep 3 ..." && sleep 3
        docker ps
        echo ""
        echo "#####################"
        echo "netstat -tupanl|egrep \"80|8080|8081\"|grep -i listen"
        netstat -tupanl|egrep "80|8080|8081"|grep -i listen
      }
      
      systemd_config() {
        echo "**********************************************************"
        echo "STEP 4:  Systemd Service for flaskapp"
        echo "**********************************************************"
        echo "Create: /etc/systemd/system/flaskapp.service"
        cat <<EOF > /etc/systemd/system/flaskapp.service
        [Unit]
        Description=Script for flaskapp
      
        [Service]
        Type=oneshot
        ExecStart=-$init_dir/start.sh
        RemainAfterExit=true
        ExecStop=-$init_dir/stop.sh
        StandardOutput=journal
      
        [Install]
        WantedBy=multi-user.target
      EOF
        cat /etc/systemd/system/flaskapp.service
        systemctl start flaskapp
        systemctl enable flaskapp
      }
      
      install_packages | tee -a "$log_init"
      start_services | tee -a "$log_init"
      check_services | tee -a "$log_init"
      systemd_config | tee -a "$log_init"
      
  - path: /var/lib/spoke/start.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      set -e
      
      base_dir=$(pwd)
      init_dir="/var/lib/spoke"
      log_service="$init_dir/log_service.txt"
      
      display_delimiter() {
        echo "####################################################################################"
        date
        echo $(basename "$0")
        echo "SYSTEMCTL - Start"
      }
      
      start_services() {
        echo "**************************************"
        echo "STEP 1: Start Services"
        echo "**************************************"
        cd "$init_dir"
        echo "docker compose up -d"
        docker compose up -d
        cd "$dir_base"
      }
      
      check_services() {
        echo "**************************************"
        echo "STEP 2: Check Service Status"
        echo "**************************************"
        echo "sleep 3 ..." && sleep 3
        docker ps
        echo ""
        echo "#####################"
        echo "netstat -tupanl|egrep \"80|8080|8081\"|grep -i listen"
        netstat -tupanl|egrep "80|8080|8081"|grep -i listen
      }
      
      start=$(date +%s)
      display_delimiter | tee -a $log_service
      start_services | tee -a $log_service
      check_services | tee -a $log_service
      end=$(date +%s)
      elapsed=$(($end-$start))
      echo "Completed in $(($elapsed/60))m $(($elapsed%60))s!" | tee -a $log_service
      
  - path: /var/lib/spoke/stop.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      set -e
      
      base_dir=$(pwd)
      init_dir="/var/lib/spoke"
      log_service="$init_dir/log_service.txt"
      
      display_delimiter() {
        echo "####################################################################################"
        date
        echo $(basename "$0")
        echo "SYSTEMCTL - Start"
      }
      
      stop_services() {
        echo "**************************************"
        echo "STEP 1: Stop Services"
        echo "**************************************"
        cd "$init_dir"
        echo "docker compose down"
        docker compose down
        cd "$dir_base"
      }
      
      check_services() {
        echo "**************************************"
        echo "STEP 2: Check Service Status"
        echo "**************************************"
        echo "sleep 3 ..." && sleep 3
        docker ps
        echo ""
        echo "#####################"
        echo "netstat -tupanl|egrep \"80|8080|8081\"|grep -i listen"
        netstat -tupanl|egrep "80|8080|8081"|grep -i listen
      }
      
      start=$(date +%s)
      display_delimiter | tee -a $log_service
      stop_services | tee -a $log_service
      check_services | tee -a $log_service
      end=$(date +%s)
      elapsed=$(($end-$start))
      echo "Completed in $(($elapsed/60))m $(($elapsed%60))s!" | tee -a $log_service
      


runcmd:
  - . /var/lib/spoke/service.sh
