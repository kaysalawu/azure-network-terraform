#cloud-config

package_update: true
package_upgrade: true
packages:
  - docker.io
  - docker-compose
  - tcpdump
  - dnsutils
  - net-tools
  - nmap
  - apache2-utils

write_files:
  - path: /etc/nginx/nginx.conf
    owner: root
    permissions: 0744
    content: |
      user  nginx;
      worker_processes  auto;
      
      events {
          worker_connections  1024;
      }
      
      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
      
          server {
              listen 8080 ssl;
      
              ssl_certificate     /etc/ssl/app/cert.pem;
              ssl_certificate_key /etc/ssl/app/key.pem;
      
              location / {
                  proxy_pass http://localhost:9000;
              }
          }
      }
      
  - path: /etc/ssl/app/cert.pem
    owner: root
    permissions: 0400
    content: |
      -----BEGIN CERTIFICATE-----
      MIIEOTCCAyGgAwIBAgIQDEXDrdcBK02eQvKMq/MowDANBgkqhkiG9w0BAQsFADCB
      jDELMAkGA1UEBhMCVUsxEDAOBgNVBAgTB0VuZ2xhbmQxDzANBgNVBAcTBkxvbmRv
      bjEaMBgGA1UECRMRbXBscyBjaGlja2VuIHJvYWQxDTALBgNVBAoTBGRlbW8xGzAZ
      BgNVBAsTEmNsb3VkIG5ldHdvcmsgdGVhbTESMBAGA1UEAwwJKi5hei5jb3JwMB4X
      DTI0MDExNzE3MjEwM1oXDTI1MDExNjE3MjEwM1owgasxCzAJBgNVBAYTAlVLMRAw
      DgYDVQQIEwdFbmdsYW5kMQ8wDQYDVQQHEwZMb25kb24xNTAWBgNVBAkTDyBuZXR3
      b3JrIGF2ZW51ZTAbBgNVBAkTFDk5IG1wbHMgY2hpY2tlbiByb2FkMRIwEAYDVQQK
      EwlhcHAxIGRlbW8xGjAYBgNVBAsTEWFwcDEgbmV0d29yayB0ZWFtMRIwEAYDVQQD
      DAkqLmF6LmNvcnAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDElXZU
      ZGFiweqRNkBh4FOJ/2iy354EGvkEYYme491zKhdxh5gpbJlDgNuRRUOrnAploK9+
      /C1rmoH95+G3BwX7KV47QBZdmH4rNOJdoQluifBbbgcAGH22bqy6hbfFkILJ2AJo
      fSGBDRUn++Jscgwf5hTdqiuTWkpBQ3pYbSg3jGu2wU7m8EuMFshKNnwqf6koGAug
      CepD8JOQEbtc4RJCRVHkEWqiCZrSmhlhebhRUQYB14DVgNGTNOwM+j8nD1iYw7Ud
      nYAXZVt5QtWfrXVQ3UL7q0H5OAo/pWmEjWsC7vPn6b7zpylwTnTXWWKV2RLvrJL4
      y7mU3Ew62njfngTNAgMBAAGjdjB0MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU
      BggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBR+
      ywUVq6GMrQsZB3/SAIyIY0qHhzAUBgNVHREEDTALggkqLmF6LmNvcnAwDQYJKoZI
      hvcNAQELBQADggEBANOCnQszJb9e+/+4vM0SKxkiibmjkk1yUi83DQ0ZnFoYiff2
      Ijw/+5ATaVOm1vgXpKlg3G5vCDNlw92x/nO2DuBX0mTDSkdGh1gk7ozPSHIrG6Jm
      04c7RN7NFP0a7auvEZ/Bjht0lVIuLWvJjaWYWi6Fmu7lFSJthqjndEDTw7BmZcKY
      A5WePDFiXA6WID6rasxIE+1BXKt8C8meiM1iintAZEkaB71AU1H1jcD/RhKSr4XM
      YmidZ6RBgOlKtGagmnq9nsFyxMrco2H+WaKrXhHqyKXGtlVr1XtzdaJ4eorsPUb8
      wPdP0KgrfxcxKtywtVcqgX20mxoNWCnuojLScsQ=
      -----END CERTIFICATE-----
      
      -----BEGIN CERTIFICATE-----
      MIID5jCCAs6gAwIBAgIQDl1qcKCHNBsEZiXZaSwkVTANBgkqhkiG9w0BAQsFADCB
      jDELMAkGA1UEBhMCVUsxEDAOBgNVBAgTB0VuZ2xhbmQxDzANBgNVBAcTBkxvbmRv
      bjEaMBgGA1UECRMRbXBscyBjaGlja2VuIHJvYWQxDTALBgNVBAoTBGRlbW8xGzAZ
      BgNVBAsTEmNsb3VkIG5ldHdvcmsgdGVhbTESMBAGA1UEAwwJKi5hei5jb3JwMB4X
      DTI0MDExNzE3MjEwM1oXDTI1MDExNjE3MjEwM1owgYwxCzAJBgNVBAYTAlVLMRAw
      DgYDVQQIEwdFbmdsYW5kMQ8wDQYDVQQHEwZMb25kb24xGjAYBgNVBAkTEW1wbHMg
      Y2hpY2tlbiByb2FkMQ0wCwYDVQQKEwRkZW1vMRswGQYDVQQLExJjbG91ZCBuZXR3
      b3JrIHRlYW0xEjAQBgNVBAMMCSouYXouY29ycDCCASIwDQYJKoZIhvcNAQEBBQAD
      ggEPADCCAQoCggEBANwbYbkSgQiriigaVrfHJ1lRHI20Oxg1kUywoDC6PEmK7jW5
      K6Y7EgH0LJLi5nBWbeArTHUecfw2cTfg2getAF1Vrhv6/A/rwOvxU7XBDNV5iVDO
      jhrrX+6d52r/62c5aJ8HZG1l3VMLFym6OOQ1l3O0zkW0gvW97+KshzY5TsUtmqev
      jK68wlH9mzmZ6p1m2xptn0fC4tmG92l1AswQe7Zcm9EWZNOwM83q2BoQNj3PKpEd
      R+eNReX8lJaS5p1V2PYW+CYynNXAzyWOIRpCFV4hUmWXFfLj6Q8BKzCUvid+5jmr
      cewaMZmfd2ediwvLmOzBO09/ozNNOLvBel2IiWsCAwEAAaNCMEAwDgYDVR0PAQH/
      BAQDAgKkMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFH7LBRWroYytCxkHf9IA
      jIhjSoeHMA0GCSqGSIb3DQEBCwUAA4IBAQAyqrYieM347nR6YpwfHJJshdcqjOxx
      5czW+6dlNvRicchIL4KZdWG83zsfyy9BJcGOdniVk9POZo6va+E6RHlGeDQjewNK
      vFGxV6FsMvlWrhCC+pqBK0Sn4ANgMXwYEoPcJv4cAba8wSw+3eMpYlWKiARZaz+F
      aYNXrygg5aAYJcLu/CXdvuAqPXQq4qcCCBicP7a6Y4JPmIngMLJ0ttJZxIki6zaJ
      y0HsmwSILD+3KfUyWVyWUFSSTbMJx2EDsOEhe0tcMOAzTalN4vaueMYBOlfhsbij
      g9jpolDfV+fusYEL20RIFFnDVAr6bdg8S6a3FYQi+1nZlcKulBJ7oKnJ
      -----END CERTIFICATE-----
      
  - path: /etc/ssl/app/key.pem
    owner: root
    permissions: 0400
    content: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEogIBAAKCAQEAxJV2VGRhYsHqkTZAYeBTif9ost+eBBr5BGGJnuPdcyoXcYeY
      KWyZQ4DbkUVDq5wKZaCvfvwta5qB/efhtwcF+yleO0AWXZh+KzTiXaEJbonwW24H
      ABh9tm6suoW3xZCCydgCaH0hgQ0VJ/vibHIMH+YU3aork1pKQUN6WG0oN4xrtsFO
      5vBLjBbISjZ8Kn+pKBgLoAnqQ/CTkBG7XOESQkVR5BFqogma0poZYXm4UVEGAdeA
      1YDRkzTsDPo/Jw9YmMO1HZ2AF2VbeULVn611UN1C+6tB+TgKP6VphI1rAu7z5+m+
      86cpcE5011lildkS76yS+Mu5lNxMOtp4354EzQIDAQABAoIBAH1styDFIvV1sAmS
      SaWpEOPdF5n43sLTysmmyb2cuO//jRGcZ9MWPPs6vdyECtb1KhUJXq9wijI7VHEB
      f5vdWU2UaVD4ZMy2vNkoVr1SP8hNLhPHsaO3/I1nM8GWC1h8CVZrAa5VGAlUpYjr
      Rt3WLjI0BGAhcMgFNZdKTEca7ivxxvjWY7C/iFrXmI2zvZ9gI8Mj5AaRFjRfGGKi
      ymN+9ZiEOoz1cWjum0cyxnL2+2/os37uNK0ptw4WYcZ0W+Wd+Yl4dkUnt176btoL
      dFfJjUB7O+GRtJ5pkCC0ESQsokpMZBBOvL9nEZgRqKluYuHFlg0EleM2XI8R5Oby
      yzDgaakCgYEA0osNW5kDNasSHpjdWOAemwcTPkOCJ6L1fEraw0xzPCTZS51vJZC5
      X0PK5dTaOlhXwpq+L+d/Uz2B6KWLgmkD5NUleRDWIdnmwx0Me3M3AiawCLy6iACN
      Z/64uyW86SKtGdTl21dgP+MPpSRbWZmKEIblTllRaLgEkO99JD/yPncCgYEA7wbc
      zsiikdeQy4EzQcLCHKr4PoYxNcHAftAvVZNBZMf6wSW1OOsoqA8x2+2E0haUnZAP
      Ku0PgykO++39IPckf2/NmUJJyIH69zRqR5dC+qCwrzbvUTFVexfqdBvM9BnjjZ00
      OYfanTL1HkRLNifDIIPrxrZAXPOgmAlnewZuU9sCgYB9nLBvga7EijfZQWJt7+jS
      nToB38z7UOIdMZurASWPMHzj/B2fz+SIza1zybYZMTPKyv/FHNx+ESg8YOgG+hh0
      oiYlQMJAl/xxVBdqX6bmBaboz5CKK6ox7WrRXQaEIUgdLUOlxU+LTjC7WiGWJ2CT
      06djQy6qx38R6ZBD3FLuqQKBgCwlUFLAq4XUEmIDkrvqhH9W9FJX5m7PQgYp3RQp
      BkLezGkv1bCVfgTMCaFc1NMYaIpROPvsnJjU1HejFMUp4AvJUmej3oyxtPBDNf3S
      6gPv+bHiq4CLZAY//IVFPS04OtbE2ghmFvJBnxPf+SQfY+J1eu5QasLAHED4O6x1
      G5tRAoGATXAFmppSekpnbJ5V32tJqsEsQh2p59SjHmf4sOJKI7ujfwog4RgCO+XI
      IzSrzjG7jGKwLqCUB+3pBjHmpYLFgRexFDiPUjzYjYA3W+3ZsZcMzF8wUsX9ZFhu
      y8to8gQhq22XFQZRRMswP668NKJ9CLw2joIbJ1n7Ihz1XKEc7A4=
      -----END RSA PRIVATE KEY-----
      
  - path: /var/lib/spoke/app1/.dockerignore
    owner: root
    permissions: 0744
    content: |
      Dockerfile
      docker-compose*
      .gitignore
      pyvenv.cfg
      tests
      node_modules/
      npm-debug.log
      bin/
      include/
      lib/
      lib64/
      
  - path: /var/lib/spoke/app1/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine
      
      WORKDIR /app
      COPY . .
      RUN pip install --verbose --no-cache-dir -r requirements.txt
      EXPOSE 9000
      CMD ["python3", "main.py"]
      
  - path: /var/lib/spoke/app1/_app.py
    owner: root
    permissions: 0744
    content: |
      import os
      import socket
      from fastapi import APIRouter, Request, HTTPException
      
      router = APIRouter()
      
      hostname = socket.gethostname()
      address = socket.gethostbyname(hostname)
      
      @router.get("/")
      async def default(request: Request):
          data_dict = {
              'app': 'app1-Home',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.client.host,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @router.get("/path1")
      async def path1(request: Request):
          data_dict = {
              'app': 'app1-Path1',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.client.host,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @router.get("/path2")
      async def path2(request: Request):
          data_dict = {
              'app': 'app1-Path2',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.client.host,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @router.get("/healthz")
      async def healthz(request: Request):
          # allowed_hosts = ["healthz.az.corp"]
          # if request.client.host not in allowed_hosts:
          #     raise HTTPException(status_code=403, detail="Access denied")
          return "OK"
      
  - path: /var/lib/spoke/app1/main.py
    owner: root
    permissions: 0744
    content: |
      from fastapi import FastAPI, Request, Response, HTTPException
      from fastapi.middleware.cors import CORSMiddleware
      from fastapi.responses import JSONResponse
      from _app import router as app_router
      import json
      import ssl
      import uvicorn
      
      class PrettyJSONResponse(Response):
          media_type = "application/json"
      
          def render(self, content: any) -> bytes:
              return json.dumps(content, indent=2).encode('utf-8')
      
      app = FastAPI(default_response_class=PrettyJSONResponse)
      
      # CORS middleware
      app.add_middleware(
          CORSMiddleware,
          allow_origins=["*"],  # Replace * with actual frontend domain
          allow_credentials=True,
          allow_methods=["*"],
          allow_headers=["*"],
      )
      
      # Custom middleware to add Access-Control-Allow-Origin header
      @app.middleware("http")
      async def add_cors_header(request, call_next):
          response = await call_next(request)
          response.headers["Access-Control-Allow-Origin"] = "*"
          return response
      
      # Include the API router
      app.include_router(app_router, tags=["Features"])
      
      if __name__ == "__main__":
          uvicorn.run(
              "main:app",
              host="0.0.0.0",
              port=9000
          )
      
      
  - path: /var/lib/spoke/app1/requirements.txt
    owner: root
    permissions: 0744
    content: |
      cryptography==41.0.7
      fastapi==0.105.0
      uvicorn==0.25.0
      
  - path: /var/lib/spoke/app2/.dockerignore
    owner: root
    permissions: 0744
    content: |
      Dockerfile
      docker-compose*
      .gitignore
      pyvenv.cfg
      tests
      node_modules/
      npm-debug.log
      bin/
      include/
      lib/
      lib64/
      
  - path: /var/lib/spoke/app2/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine
      
      WORKDIR /app
      COPY . .
      RUN pip install --verbose --no-cache-dir -r requirements.txt
      EXPOSE 8081
      CMD ["python3", "main.py"]
      
  - path: /var/lib/spoke/app2/_app.py
    owner: root
    permissions: 0744
    content: |
      import os
      import socket
      from fastapi import APIRouter, Request, HTTPException
      
      router = APIRouter()
      
      hostname = socket.gethostname()
      address = socket.gethostbyname(hostname)
      
      @router.get("/")
      async def default(request: Request):
          data_dict = {
              'app': 'app2-Home',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.client.host,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @router.get("/path1")
      async def path1(request: Request):
          data_dict = {
              'app': 'app2-Path1',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.client.host,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @router.get("/path2")
      async def path2(request: Request):
          data_dict = {
              'app': 'app2-Path2',
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'local-ip': os.getenv('HOST_IP', address),
              'remote-ip': request.client.host,
              'headers': dict(request.headers)
          }
          return data_dict
      
      @router.get("/healthz")
      async def healthz(request: Request):
          # allowed_hosts = ["healthz.az.corp"]
          # if request.client.host not in allowed_hosts:
          #     raise HTTPException(status_code=403, detail="Access denied")
          return "OK"
      
  - path: /var/lib/spoke/app2/main.py
    owner: root
    permissions: 0744
    content: |
      from fastapi import FastAPI, Request, Response, HTTPException
      from fastapi.middleware.cors import CORSMiddleware
      from fastapi.responses import JSONResponse
      from _app import router as app_router
      import json
      import ssl
      import uvicorn
      
      class PrettyJSONResponse(Response):
          media_type = "application/json"
      
          def render(self, content: any) -> bytes:
              return json.dumps(content, indent=2).encode('utf-8')
      
      app = FastAPI(default_response_class=PrettyJSONResponse)
      
      # CORS middleware
      app.add_middleware(
          CORSMiddleware,
          allow_origins=["*"],  # Replace * with actual frontend domain
          allow_credentials=True,
          allow_methods=["*"],
          allow_headers=["*"],
      )
      
      # Custom middleware to add Access-Control-Allow-Origin header
      @app.middleware("http")
      async def add_cors_header(request, call_next):
          response = await call_next(request)
          response.headers["Access-Control-Allow-Origin"] = "*"
          return response
      
      # Include the API router
      app.include_router(app_router, tags=["Features"])
      
      if __name__ == "__main__":
          uvicorn.run(
              "main:app",
              host="0.0.0.0",
              port=8081
          )
      
      
  - path: /var/lib/spoke/app2/requirements.txt
    owner: root
    permissions: 0744
    content: |
      cryptography==41.0.7
      fastapi==0.105.0
      uvicorn==0.25.0
      
  - path: /var/lib/spoke/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3'
      services:
        nginx:
          container_name: nginx
          build:
            context: ./nginx
            dockerfile: Dockerfile
          network_mode: host
          volumes:
            - /etc/ssl/app/cert.pem:/etc/ssl/app/cert.pem
            - /etc/ssl/app/key.pem:/etc/ssl/app/key.pem
            - /etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      
        app1:
          container_name: app1
          build:
            context: ./app1
            dockerfile: Dockerfile
          network_mode: host
      
        app2:
          container_name: app2
          build:
            context: ./app2
            dockerfile: Dockerfile
          network_mode: host
      
  - path: /var/lib/spoke/nginx/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM nginx:latest
      
      EXPOSE 8080
      CMD ["nginx", "-g", "daemon off;"]
      
  - path: /var/lib/spoke/service.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      set -e
      
      base_dir=$(pwd)
      init_dir="/var/lib/spoke"
      log_init="$init_dir/log_init.txt"
      
      echo "HOST_HOSTNAME: $HOST_HOSTNAME" | tee -a "$log_init"
      echo "HOST_IP: $HOST_IP" | tee -a "$log_init"
      
      if [ ! -d "$init_dir" ]; then mkdir -p "$init_dir"; fi
      
      echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf
      sysctl -p
      
      sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf
      
      cat <<EOF > /etc/motd
      ################################################
               Docker Multiport Application
      ################################################
      Docker Ubuntu
       Date:     $(date)
      - Version:  1.0
      - Distro:   $(cat /etc/issue)
      - Packages:
        - Docker
      ################################################
      
      EOF
      
      display_delimiter() {
        echo "####################################################################################"
        date
        echo $(basename "$0")
      }
      
      cleanup() {
          echo "*****************************************"
          echo " Cleanup apt"
          echo "*****************************************"
          apt-get --purge -y autoremove
          apt-get clean
          echo "done!"
      }
      
      start_services() {
        echo "**************************************"
        echo " Start Services"
        echo "**************************************"
        cd "$init_dir"
        export HOST_HOSTNAME=$(hostname)
        export HOST_IP=$(hostname -I | awk '{print $1}')
        HOST_HOSTNAME=$(hostname) HOST_IP=$(hostname -I | awk '{print $1}') docker-compose up -d
        cd "$dir_base"
      }
      
      check_services() {
        echo "**************************************"
        echo " Check Service Status"
        echo "**************************************"
        echo "sleep 3 ..." && sleep 3
        echo "docker ps"
        docker ps
      }
      
      systemd_config() {
        echo "**********************************************************"
        echo " Systemd Service for fastapp"
        echo "**********************************************************"
        echo "Create: /etc/systemd/system/fastapp.service"
        cat <<EOF > /etc/systemd/system/fastapp.service
        [Unit]
        Description=Script for fastapp
      
        [Service]
        Type=oneshot
        ExecStart=-$init_dir/start.sh
        RemainAfterExit=true
        ExecStop=-$init_dir/stop.sh
        StandardOutput=journal
      
        [Install]
        WantedBy=multi-user.target
      EOF
        cat /etc/systemd/system/fastapp.service
        systemctl start fastapp
        systemctl enable fastapp
      }
      
      start=$(date +%s)
      display_delimiter | tee -a "$log_init"
      cleanup | tee -a "$log_init"
      start_services | tee -a "$log_init"
      check_services | tee -a "$log_init"
      systemd_config | tee -a "$log_init"
      end=$(date +%s)
      elapsed=$(($end-$start))
      echo "Completed in $(($elapsed/60))m $(($elapsed%60))s!" | tee -a "$log_init"
      
  - path: /var/lib/spoke/start.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      set -e
      
      base_dir=$(pwd)
      init_dir="/var/lib/spoke"
      log_service="$init_dir/log_service.txt"
      
      display_delimiter() {
        echo "####################################################################################"
        date
        echo $(basename "$0")
        echo "SYSTEMCTL - Start"
      }
      
      start_services() {
        echo "**************************************"
        echo " Start Services"
        echo "**************************************"
        cd "$init_dir"
        echo "docker compose up -d"
        docker compose up -d
        cd "$dir_base"
      }
      
      check_services() {
        echo "**************************************"
        echo " Check Service Status"
        echo "**************************************"
        echo "sleep 3 ..." && sleep 3
        docker ps
        echo ""
        echo "#####################"
        echo "netstat -tupanl|egrep \"80|8080|8081\"|grep -i listen"
        netstat -tupanl|egrep "80|8080|8081"|grep -i listen
      }
      
      start=$(date +%s)
      display_delimiter | tee -a $log_service
      start_services | tee -a $log_service
      check_services | tee -a $log_service
      end=$(date +%s)
      elapsed=$(($end-$start))
      echo "Completed in $(($elapsed/60))m $(($elapsed%60))s!" | tee -a $log_service
      
  - path: /var/lib/spoke/stop.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      set -e
      
      base_dir=$(pwd)
      init_dir="/var/lib/spoke"
      log_service="$init_dir/log_service.txt"
      
      display_delimiter() {
        echo "####################################################################################"
        date
        echo $(basename "$0")
        echo "SYSTEMCTL - Start"
      }
      
      stop_services() {
        echo "**************************************"
        echo " Stop Services"
        echo "**************************************"
        cd "$init_dir"
        echo "docker compose down"
        docker compose down
        cd "$dir_base"
      }
      
      check_services() {
        echo "**************************************"
        echo " Check Service Status"
        echo "**************************************"
        echo "sleep 3 ..." && sleep 3
        docker ps
        echo ""
        echo "#####################"
        echo "netstat -tupanl|egrep \"80|8080|8081\"|grep -i listen"
        netstat -tupanl|egrep "80|8080|8081"|grep -i listen
      }
      
      start=$(date +%s)
      display_delimiter | tee -a $log_service
      stop_services | tee -a $log_service
      check_services | tee -a $log_service
      end=$(date +%s)
      elapsed=$(($end-$start))
      echo "Completed in $(($elapsed/60))m $(($elapsed%60))s!" | tee -a $log_service
      
runcmd:
  - . /var/lib/spoke/service.sh
