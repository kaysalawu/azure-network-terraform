#cloud-config

package_update: true
package_upgrade: true
packages:
  - docker.io
  - docker-compose
  - dnsutils
  - net-tools

write_files:
  - path: /etc/squid/blocked_sites
    owner: root
    permissions: 0744
    content: |
      google.com
      bbc.co.uk
      
  - path: /etc/squid/squid.conf
    owner: root
    permissions: 0744
    content: |
      # squid.conf
      http_port 3128
      
      acl blocked_sites dstdomain "/etc/squid/blocked_sites"
      http_access deny blocked_sites
      
      http_access allow all
      
      # Enable logging
      access_log /var/log/squid/access.log squid
      cache_log /var/log/squid/cache.log
      cache_store_log /var/log/squid/store.log
      
  - path: /etc/unbound/unbound.conf
    owner: root
    permissions: 0744
    content: |
      
      server:
          interface: 0.0.0.0
      
          access-control: 0.0.0.0 deny
          access-control: 127.0.0.0/8 allow
          access-control: 10.0.0.0/8 allow
          access-control: 192.168.0.0/16 allow
          access-control: 172.16.0.0/12 allow
          access-control: 35.199.192.0/19 allow
      
          local-data: "webd1.corp.sap.com 3600 IN A 10.0.3.4"
          local-data: "webd2.corp.sap.com 3600 IN A 10.0.3.5"
          local-data: "appsrv1.corp.sap.com 3600 IN A 10.0.3.6"
          local-data: "appsrv2.corp.sap.com 3600 IN A 10.0.3.7"
          local-data: "cgs.corp.sap.com 3600 IN A 10.0.3.8"
          local-data: "ilb.corp.sap.com 3600 IN A 10.0.3.99"
      
      forward-zone:
          name: "."
          forward-addr: 168.63.129.16
      
  - path: /var/lib/azure/crawler/app/crawler.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      char_pass="\u2714"
      char_fail="\u274c"
      char_question="\u2753"
      char_notfound="\u26D4"
      char_exclamation="\u2757"
      char_celebrate="\u2B50"
      char_executing="\u23F3"
      
      color_green=$(tput setaf 2)
      color_red=$(tput setaf 1)
      reset=$(tput sgr0)
      
      export TOKEN=$(az account get-access-token --query accessToken --output tsv)
      export ACCOUNT_KEY=$(az storage account keys list -g G10_SapNetworking_RG --account-name g10ecs38e7 --query '[0].value' --output tsv)
      curl -s https://download.microsoft.com/download/7/1/D/71D86715-5596-4529-9B13-DA13A5DE5B63/ServiceTags_Public_20240318.json > service_tags.json
      
      function find_my_public_ip() {
        echo -e "\n----------------------------------------"
        echo -e "Public IP mapping"
        echo -e "----------------------------------------"
        local public_ip=$(curl -s ifconfig.me)
        echo -e "My public IP --> $public_ip"
      
        ips=$(az network public-ip list -g G10_SapNetworking_RG --query "[].{ip:ipAddress, name:name, id:id}" -o tsv)
        local found=0
        while IFS= read -r line; do
            ip=$(echo $line | awk '{print $1}')
            name=$(echo $line | awk '{print $2}')
            id=$(echo $line | awk '{print $3}')
      
            if [[ "$ip" == "$public_ip" ]]; then
                echo "$public_ip --> $name"
                found=1
                break
            fi
        done <<< "$ips"
      
        if [[ $found -eq 0 ]]; then
            echo "default outbound <-- $public_ip"
        fi
      }
      
      function resolve_dns() {
        local host=$1
        dns_result=$(host "$host" 2>&1)
        if echo "$dns_result" | grep -q "has address"; then
          ip_address=$(echo "$dns_result" | awk '/has address/ { print $4 }' | head -n 1)
          echo -e  "  $ip_address <-- $host"
        else
          echo -e  "  $dns_result"
        fi
      }
      
      function get_azure_service_tag_from_host() {
        local service=$1
        local ip_address=$(host "$service" | awk '/has address/ { print $4 }' | head -n 1)
        python3 service_tags.py "$ip_address" "service_tags.json"
      }
      
      function check_access_to_service() {
        local service=$1
        echo -e "\n----------------------------------------"
        echo -e "Access to $service"
        echo -e "----------------------------------------"
        resolve_dns $service
        get_azure_service_tag_from_host $service
        management_url="https://management.azure.com/subscriptions?api-version=2020-01-01"
        echo -e "* Testing access to $service"
        python3 service_access.py $management_url $TOKEN
      }
      
      function download_blob() {
        local account_name=$1
        local container_name=$2
        local blob_name=$3
        echo -e "\n----------------------------------------"
        echo -e "Blob (data plane)"
        echo -e "----------------------------------------"
        local blob_url=$(az storage blob url --account-name $account_name --container-name $container_name --name $blob_name --account-key $ACCOUNT_KEY --output tsv)
        host=$(echo $blob_url | awk -F/ '{print $3}')
        echo -e "  url = $blob_url"
        echo -e "  host = $host"
        resolve_dns $host
        get_azure_service_tag_from_host $host
      
        echo "* Downloading blob ..."
        az storage blob download --account-name $account_name -c $container_name -n $blob_name --account-key $ACCOUNT_KEY --file "./storage.txt" > /dev/null 2>&1
        if [ -s "./storage.txt" ]; then
          echo -e  "  $char_pass Content: $(cat storage.txt)"
          rm ./storage.txt
        else
          echo -e  "  $char_fail Blob download: failed!"
        fi
      }
      
      function access_keyvault_secret() {
        local keyvault_name=$1
        local secret_name=$2
        echo -e "\n----------------------------------------"
        echo -e "Key Vault (data plane)"
        echo -e "----------------------------------------"
        local keyvault_secret_url=$(az keyvault secret show --vault-name $keyvault_name --name $secret_name --query id --output tsv)
        host=$(echo $keyvault_secret_url | awk -F/ '{print $3}')
        echo -e "  url: https://$host/secrets/$secret_name/<ID>"
        echo -e "  host: $host"
        resolve_dns $host
        get_azure_service_tag_from_host $host
      
        echo "* Accessing secret ..."
        secret_value=$(az keyvault secret show --vault-name $keyvault_name --name $secret_name --query value --output tsv)
        if [ -n "$secret_value" ]; then
          echo -e "  $char_pass $2: $secret_value"
        else
          echo -e "  $char_fail $2: not found!"
        fi
      }
      
      find_my_public_ip
      check_access_to_service "management.azure.com"
      download_blob "g10ecs38e7" "storage" "storage.txt"
      access_keyvault_secret "G10-ecs-kv38e7" "message"
      rm service_tags.json
      
  - path: /var/lib/azure/crawler/app/requirements.txt
    owner: root
    permissions: 0744
    content: |
      certifi==2024.2.2
      charset-normalizer==3.3.2
      idna==3.6
      requests==2.31.0
      urllib3==2.2.1
      
  - path: /var/lib/azure/crawler/app/service_access.py
    owner: root
    permissions: 0744
    content: |
      import sys
      import requests
      
      def test_access(url, token):
          url = "https://management.azure.com/subscriptions?api-version=2020-01-01"
          headers = {"Authorization": f"Bearer {token}"}
          response = requests.get(url, headers=headers)
          print(f"  {response.status_code}: management.azure.com")
      
      def main():
          if len(sys.argv) < 3:
              print("Usage: python service_access.py <url> <token>")
              sys.exit(1)
      
          url = sys.argv[1]
          token = sys.argv[2]
          test_access(url, token)
      
      if __name__ == "__main__":
          main()
      
  - path: /var/lib/azure/crawler/app/service_tags.py
    owner: root
    permissions: 0744
    content: |
      import os
      import sys
      import json
      import ipaddress
      
      SUBSCRIPTION_ID = os.getenv('SUBSCRIPTION_ID')
      
      with open('service_tags.json', 'r') as file:
          data = json.load(file)
      
      def locate_IP_range(ip_address):
          target_ip = ipaddress.ip_address(ip_address)
          matches = []
      
          for value in data['values']:
              for prefix in value['properties']['addressPrefixes']:
                  if target_ip in ipaddress.ip_network(prefix):
                      matches.append(f"  - {ipaddress.ip_network(prefix)} <-- {value['id']} ({value['properties']['region']})")
      
          for match in matches:
              print(match)
      
      def main():
          if len(sys.argv) < 2:
              print("Usage: python service_tags.py <ip_address>")
              sys.exit(1)
      
          ip_address = sys.argv[1]
          print(f"* Searching for service tags ({ip_address})")
          locate_IP_range(ip_address)
      
      if __name__ == "__main__":
          main()
      
  - path: /var/lib/azure/init/server.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      apt update
      apt install -y python3-pip python3-dev python3-venv unzip jq tcpdump dnsutils net-tools nmap apache2-utils iperf3
      
      pip3 install azure-identity
      pip3 install azure-mgmt-network
      
      apt install -y openvpn network-manager-openvpn
      sudo service network-manager restart
      
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      az login --identity || true
      
      # web server #
      pip3 install Flask requests
      
      mkdir /var/flaskapp
      mkdir /var/flaskapp/flaskapp
      mkdir /var/flaskapp/flaskapp/static
      mkdir /var/flaskapp/flaskapp/templates
      
      cat <<EOF > /var/flaskapp/flaskapp/__init__.py
      import socket
      from flask import Flask, request
      app = Flask(__name__)
      
      @app.route("/")
      def default():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      @app.route("/path1")
      def path1():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['app'] = 'PATH1-APP'
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      @app.route("/path2")
      def path2():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['app'] = 'PATH2-APP'
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      if __name__ == "__main__":
          app.run(host= '0.0.0.0', port=80, debug = True)
      EOF
      
      cat <<EOF > /etc/systemd/system/flaskapp.service
      [Unit]
      Description=Script for flaskapp service
      
      [Service]
      Type=simple
      ExecStart=/usr/bin/python3 /var/flaskapp/flaskapp/__init__.py
      ExecStop=/usr/bin/pkill -f /var/flaskapp/flaskapp/__init__.py
      StandardOutput=journal
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      systemctl daemon-reload
      systemctl enable flaskapp.service
      systemctl start flaskapp.service
      
      # test scripts
      #-----------------------------------
      
      # ping-ip
      
      cat <<EOF > /usr/local/bin/ping-ip
      echo -e "\n ping ip ...\n"
      echo "onprem - 10.10.0.5 -\$(timeout 3 ping -qc2 -W1 10.10.0.5 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      echo "internet - icanhazip.com -\$(timeout 3 ping -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-ip
      
      # ping-dns
      
      cat <<EOF > /usr/local/bin/ping-dns
      echo -e "\n ping dns ...\n"
      echo "onpremvm.corp - \$(timeout 3 dig +short onpremvm.corp | tail -n1) -\$(timeout 3 ping -qc2 -W1 onpremvm.corp 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      echo "icanhazip.com - \$(timeout 3 dig +short icanhazip.com | tail -n1) -\$(timeout 3 ping -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-dns
      
      # curl-ip
      
      cat <<EOF > /usr/local/bin/curl-ip
      echo -e "\n curl ip ...\n"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null 10.10.0.5) - onprem (10.10.0.5)"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null icanhazip.com) - internet (icanhazip.com)"
      EOF
      chmod a+x /usr/local/bin/curl-ip
      
      # curl-dns
      
      cat <<EOF > /usr/local/bin/curl-dns
      echo -e "\n curl dns ...\n"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null onpremvm.corp) - onpremvm.corp"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null icanhazip.com) - icanhazip.com"
      EOF
      chmod a+x /usr/local/bin/curl-dns
      
      # trace-ip
      
      cat <<EOF > /usr/local/bin/trace-ip
      echo -e "\n trace ip ...\n"
      echo -e "\nonprem"
      echo -e "-------------------------------------"
      timeout 9 tracepath 10.10.0.5
      echo -e "\ninternet"
      echo -e "-------------------------------------"
      timeout 9 tracepath icanhazip.com
      EOF
      chmod a+x /usr/local/bin/trace-ip
      
      # dns-info
      
      cat <<EOF > /usr/local/bin/dns-info
      echo -e "\n resolvectl ...\n"
      resolvectl status
      EOF
      chmod a+x /usr/local/bin/dns-info
      
      # light-traffic generator
      
      
      # heavy-traffic generator
      
      
      # crontab for traffic generators
      
      cat <<EOF > /tmp/crontab.txt
      EOF
      crontab /tmp/crontab.txt
      
  - path: /var/lib/azure/squid/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3.7'
      services:
        squid:
          container_name: squid
          image: ubuntu/squid:latest
          ports:
            - "3128:3128"
          network_mode: "host"
          volumes:
            - /etc/squid/squid.conf:/etc/squid/squid.conf
            - /etc/squid/blocked_sites:/etc/squid/blocked_sites
            - /var/log/squid/access.log:/var/log/squid/access.log
            - /var/log/squid/cache.log:/var/log/squid/cache.log
            - /var/log/squid/store.log:/var/log/squid/store.log
          restart: always
      
  - path: /var/lib/azure/squid/setup-squid.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      mkdir -p /var/log/squid
      touch /var/log/squid/access.log
      touch /var/log/squid/cache.log
      touch /var/log/squid/store.log
      chown proxy:proxy /var/log/squid/*
      chmod a+x /var/log/squid/*
      
  - path: /var/lib/azure/unbound/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM alpine:3.19.0
      RUN apk add --no-cache unbound
      EXPOSE 53/tcp 53/udp
      CMD ["unbound", "-d"]
      
  - path: /var/lib/azure/unbound/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3'
      
      services:
        unbound:
          container_name: unbound
          build:
            context: .
            dockerfile: Dockerfile
          ports:
            - "53:53/tcp"
            - "53:53/udp"
          network_mode: "host"
          volumes:
            - /etc/unbound/unbound.log:/etc/unbound/unbound.log
            - /etc/unbound/unbound.conf:/etc/unbound/unbound.conf
          cap_add:
            - NET_ADMIN
          command: ["unbound", "-d"]
          restart: always
      
  - path: /var/lib/azure/unbound/setup-unbound.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      systemctl stop systemd-resolved
      systemctl disable systemd-resolved
      echo "nameserver 8.8.8.8" > /etc/resolv.conf
      echo "$(hostname -I | cut -d' ' -f1) $(hostname)" | tee -a /etc/hosts >/dev/null
      mkdir -p /etc/unbound
      touch /etc/unbound/unbound.log && chmod a+x /etc/unbound/unbound.log
      apt-get install -y resolvconf
      

runcmd:
  - . /var/lib/azure/init/server.sh
  - . /var/lib/azure/unbound/setup-unbound.sh
  - . /var/lib/azure/squid/setup-squid.sh
  - docker-compose -f /var/lib/azure/unbound/docker-compose.yml up -d
  - docker-compose -f /var/lib/azure/squid/docker-compose.yml up -d
  - python3 -m venv /var/lib/azure/crawler
