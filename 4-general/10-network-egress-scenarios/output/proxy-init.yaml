#cloud-config

package_update: true
package_upgrade: true
packages:
  - docker.io
  - docker-compose

write_files:
  - path: /etc/squid/blocked_sites
    owner: root
    permissions: 0744
    content: |
      google.com
      bbc.co.uk
      
  - path: /etc/squid/squid.conf
    owner: root
    permissions: 0744
    content: |
      # squid.conf
      http_port 3128
      
      acl blocked_sites dstdomain "/etc/squid/blocked_sites"
      http_access deny blocked_sites
      
      http_access allow all
      
      # Enable logging
      access_log /var/log/squid/access.log squid
      cache_log /var/log/squid/cache.log
      cache_store_log /var/log/squid/store.log
      
  - path: /etc/unbound/unbound.conf
    owner: root
    permissions: 0744
    content: |
      
      server:
          interface: 0.0.0.0
      
          access-control: 0.0.0.0 deny
          access-control: 127.0.0.0/8 allow
          access-control: 10.0.0.0/8 allow
          access-control: 192.168.0.0/16 allow
          access-control: 172.16.0.0/12 allow
          access-control: 35.199.192.0/19 allow
      
          local-data: "server1.eu.az.corp 3600 IN A 10.0.3.4"
          local-data: "server2.eu.az.corp 3600 IN A 10.0.3.5"
          local-data: "proxy.eu.az.corp 3600 IN A 10.0.2.4"
      
      forward-zone:
          name: "."
          forward-addr: 168.63.129.16
      
  - path: /var/lib/azure/crawler/app/crawler.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      char_pass="\u2714"
      char_fail="\u274c"
      char_question="\u2753"
      char_notfound="\u26D4"
      char_exclamation="\u2757"
      char_celebrate="\u2B50"
      char_executing="\u23F3"
      
      bold=$(tput bold)
      color_green=$(tput setaf 2)
      color_red=$(tput setaf 1)
      reset=$(tput sgr0)
      
      echo -e "\nExtracting az token..."
      export TOKEN=$(timeout 10 az account get-access-token --query accessToken -o tsv 2>/dev/null)
      
      echo -e "Extracting metadata information ..."
      metadata=$(curl -s -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01")
      
      # metadata
      RESOURCE_GROUP=$(echo $metadata | jq -r '.compute.resourceGroupName')
      LOCATION=$(echo $metadata | jq -r '.compute.location')
      VM_NAME=$(echo $metadata | jq -r '.compute.name')
      SUBNET_CIDR=$(echo $metadata | jq -r '.network.interface[0].ipv4.subnet[0] | "\(.address)/\(.prefix)"')
      VM_ADRR=$(echo $metadata | jq -r '.network.interface[0].ipv4.ipAddress[0].privateIpAddress')
      
      # custom metadata
      SUBNET_NAME=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "SUBNET_NAME") | .value')
      VNET_NAME=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "VNET_NAME") | .value')
      MANAGEMENT_URL=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "MANAGEMENT_URL") | .value')
      STORAGE_ACCOUNT_NAME=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "STORAGE_ACCOUNT_NAME") | .value')
      STORAGE_CONTAINER_NAME=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "STORAGE_CONTAINER_NAME") | .value')
      STORAGE_BLOB_URL=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "STORAGE_BLOB_URL") | .value')
      STORAGE_BLOB_NAME=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "STORAGE_BLOB_NAME") | .value')
      STORAGE_BLOB_CONTENT=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "STORAGE_BLOB_CONTENT") | .value')
      KEY_VAULT_NAME=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "KEY_VAULT_NAME") | .value')
      KEY_VAULT_SECRET_NAME=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "KEY_VAULT_SECRET_NAME") | .value')
      KEY_VAULT_SECRET_URL=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "KEY_VAULT_SECRET_URL") | .value')
      KEY_VAULT_SECRET_VALUE=$(echo $metadata | jq -r '.compute.tagsList[] | select(.name == "KEY_VAULT_SECRET_VALUE") | .value')
      
      download_json_file() {
        local url="https://www.microsoft.com/en-us/download/details.aspx?id=56519"
        echo "Downloading Service tags JSON file from $url ..."
        local json_url=$(curl -s "$url" | grep -oP '(?<=href=")[^"]*\.json' | head -n 1)
        if [ -n "$json_url" ]; then
          if [[ ! "$json_url" =~ ^http ]]; then
            json_url="https://www.microsoft.com$json_url"
          fi
          curl -s -o service_tags.json "$json_url"
          echo "JSON file downloaded as service_tags.json"
        else
          echo "JSON file not found on the page."
        fi
      }
      
      if [ ! -f service_tags.json ]; then
        download_json_file
      else
        echo "service_tags.json already exists."
      fi
      
      echo -e "\n-------------------------------------------"
      echo -e "Environment"
      echo -e "-------------------------------------------"
      echo "VM Name:        $VM_NAME"
      echo "Subnet Name:    $SUBNET_NAME"
      echo "Subnet CIDR:    $SUBNET_CIDR"
      echo "Private IP:     $VM_ADRR"
      echo "VNET Name:      $VNET_NAME"
      echo "Location:       $LOCATION"
      echo -e "-------------------------------------------"
      
      declare -a PUBLIC_ADDRESS_TYPE
      declare -a PUBLIC_ADDRESS
      declare -a SERVICE_ENDPOINT_STATUS
      declare -a SERVICE_ENDPOINTS
      declare -a PRIVATE_SUBNET
      declare -a INTERNET_ACCESS
      declare -a MANAGEMENT_ACCESS
      declare -a BLOB_ACCESS
      declare -a KEYVAULT_ACCESS
      
      function resolve_dns() {
        local host=$1
        dns_result=$(host "$host" 2>/dev/null)
        if echo "$dns_result" | grep -q "has address"; then
          ip_address=$(echo "$dns_result" | awk '/has address/ { print $4 }' | head -n 1)
          echo -e "   $ip_address <-- $host"
        else
          echo -e "   $dns_result"
        fi
      }
      
      function get_azure_service_tag_from_host() {
        local host=$1
        local ip_address=$(host "$host" | awk '/has address/ { print $4 }' | head -n 1 2>/dev/null)
        echo -e "   Searching for service tags matching IP ($ip_address)"
        python3 service_tags.py "$ip_address" "service_tags.json" 2>/dev/null
      }
      
      function check_address_type() {
        #####################################################
        echo -e "\n1. Check Public Address Type"
        #####################################################
        local internet_url="http://ifconfig.me/ip"
        local public_ip=$(timeout 10 curl -s $internet_url)
        echo -e "   Local IP:\t$VM_ADRR"
        echo -e "   Public IP:\t$public_ip"
      
        ips=$(timeout 10 az network public-ip list -g $RESOURCE_GROUP --query "[].{ip:ipAddress, name:name, id:id}" -o tsv)
        local found=0
        while IFS= read -r line; do
          ip=$(echo $line | awk '{print $1}')
          name=$(echo $line | awk '{print $2}')
          id=$(echo $line | awk '{print $3}')
      
          if [[ "$ip" == "$public_ip" ]]; then
            PUBLIC_ADDRESS="$name"
            found=1
            break
          fi
        done <<<"$ips"
      
        if [[ $found -eq 0 ]]; then
          PUBLIC_ADDRESS_TYPE=("None")
          echo -e "   NAT_IP type:\tNone"
        fi
      }
      
      function check_service_endpoints() {
        subnet=$1
        #####################################################
        echo -e "\n2. Check Service Endpoints"
        #####################################################
        echo -e "   Subnet --> $SUBNET_NAME"
        if ! service_endpoints=$(timeout 10 az network vnet subnet show -g $RESOURCE_GROUP --vnet-name $VNET_NAME --name "$SUBNET_NAME" --query "serviceEndpoints[].service" -o tsv 2>/dev/null); then
          echo -e "   Service Endpoint: Timed out!"
          SERVICE_ENDPOINT_STATUS=("Timed out!")
        elif [ -z "$service_endpoints" ]; then
          echo -e "   Service Endpoint: Disabled"
          SERVICE_ENDPOINT_STATUS=("Disabled")
        else
          endpoints=$(echo "$service_endpoints" | tr '\t' ', ')
          echo -e "   Service Endpoint: Enabled ($endpoints)"
          SERVICE_ENDPOINT_STATUS=("Enabled")
          SERVICE_ENDPOINTS=($service_endpoints)
        fi
      }
      
      function check_private_subnet() {
        #####################################################
        echo -e "\n3. Check Private Subnet"
        #####################################################
        echo -e "   Subnet --> $SUBNET_NAME"
        if ! default_outbound_access=$(timeout 10 az network vnet subnet list --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --query "[?name=='$SUBNET_NAME'].defaultOutboundAccess" -o tsv 2>/dev/null); then
          echo -e "   DefaultOutbound: Timed out!"
          default_outbound_access="Timed out!"
        fi
        if [ "$default_outbound_access" == "Timed out!" ]; then
          echo -e "   Private Subnet:  Timed out!"
          PRIVATE_SUBNET="Timed out!"
        elif [ "$default_outbound_access" == "true" ]; then
          echo -e "   Private Subnet:  Disabled"
          PRIVATE_SUBNET=Disabled
        elif [ "$default_outbound_access" == "false" ]; then
          echo -e "   Private Subnet:  Enabled"
          PRIVATE_SUBNET=Enabled
        else
          echo -e "   Private Subnet:  "
          PRIVATE_SUBNET=
        fi
      }
      
      function check_internet_access() {
        #####################################################
        echo -e "\n4. Check Internet Access"
        #####################################################
        url="https://ifconfig.me"
        echo "   curl $url"
        if ! internet_access_code=$(timeout 10 curl -o /dev/null -s -w "%{http_code}\n" $url); then
          echo -e "   Internet Access: Timed out!"
          INTERNET_ACCESS="Timed out!"
        elif [[ "$internet_access_code" =~ ^2 ]] || [[ "$internet_access_code" =~ ^3 ]]; then
          echo -e "   Internet Access: Pass ($internet_access_code)"
          INTERNET_ACCESS="Pass"
        else
          echo -e "   Internet Access: Fail ($internet_access_code)"
          INTERNET_ACCESS="Fail"
        fi
      }
      
      function check_management_access() {
        #####################################################
        echo -e "\n5. Management (Control Plane)"
        #####################################################
        local host=$(echo $MANAGEMENT_URL | awk -F/ '{print $3}')
        echo -e "   url = $MANAGEMENT_URL"
        echo -e "   host = $host"
        resolve_dns $host 2>/dev/null
        get_azure_service_tag_from_host $host 2>/dev/null
      
        echo -e "   curl -H "Authorization : Bearer TOKEN" $MANAGEMENT_URL"
        if ! management_access_code=$(timeout 10 curl -o /dev/null -s -w "%{http_code}\n" -H "Authorization : Bearer $TOKEN" $MANAGEMENT_URL); then
          echo -e "   Management Access: Timed out!"
          MANAGEMENT_ACCESS="Timed out!"
        elif [[ "$management_access_code" =~ ^2 ]] || [[ "$management_access_code" =~ ^3 ]]; then
          echo -e "   Management Access: Pass ($management_access_code)"
          MANAGEMENT_ACCESS="Pass"
        else
          echo -e "   Management Access: Fail ($management_access_code)"
          MANAGEMENT_ACCESS="Fail"
        fi
      }
      
      function download_blob() {
        #####################################################
        echo -e "\n6. Blob (Data Plane)"
        #####################################################
        local host=$(echo $STORAGE_BLOB_URL | awk -F/ '{print $3}')
        echo -e "   url = $STORAGE_BLOB_URL"
        echo -e "   host = $host"
        resolve_dns $host 2>/dev/null
        get_azure_service_tag_from_host $host 2>/dev/null
        storage_account_key=""
        storage_access_token=""
        blob_access=""
        echo -e "   az storage account keys list -g $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT_NAME"
        if storage_account_key=$(timeout 10 az storage account keys list -g $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv 2>/dev/null); then
          echo "   az storage blob download --account-name $STORAGE_ACCOUNT_NAME -c $STORAGE_CONTAINER_NAME -n $STORAGE_BLOB_NAME --account-key <KEY>"
          blob_access=$(timeout 10 az storage blob download --account-name $STORAGE_ACCOUNT_NAME -c $STORAGE_CONTAINER_NAME -n $STORAGE_BLOB_NAME --account-key $storage_account_key --query content -o tsv 2>/dev/null)
        else
          echo -e "   Storage account key: timed out!"
          echo -e "   Fallback: Get access token for storage.azure.com via metadata ..."
          if ! storage_access_token=$(timeout 10 curl -H Metadata:true "http://169.254.169.254:80/metadata/identity/oauth2/token?resource=https%3A%2F%2Fstorage.azure.com&api-version=2018-02-01" -s | jq -r .access_token); then
            echo -e "   Storage access token: timed out!"
          else
            echo "   curl https://$STORAGE_ACCOUNT_NAME.blob.core.windows.net/$STORAGE_CONTAINER_NAME/$STORAGE_BLOB_NAME ..."
            blob_access=$(timeout 10 curl -s -H "Cache-Control: no-cache" -H "Pragma: no-cache" -H "x-ms-version: 2019-02-02" -H "Authorization: Bearer $storage_access_token" "https://$STORAGE_ACCOUNT_NAME.blob.core.windows.net/$STORAGE_CONTAINER_NAME/$STORAGE_BLOB_NAME")
          fi
        fi
      
        if [ "$blob_access" = "$STORAGE_BLOB_CONTENT" ]; then
          echo -e "   Content: $blob_access"
          echo -e "   Blob Dataplane: Pass"
          BLOB_ACCESS=Pass
        else
          echo -e "   Blob Dataplane: Fail"
          BLOB_ACCESS=Fail
        fi
      }
      
      function access_keyvault_secret() {
        #####################################################
        echo -e "\n7. KeyVault (Data Plane)"
        #####################################################
        local host=$(echo $KEY_VAULT_SECRET_URL | awk -F/ '{print $3}')
        echo -e "   url: $KEY_VAULT_SECRET_URL"
        echo -e "   host: $host"
        resolve_dns $host
        get_azure_service_tag_from_host $host 2>/dev/null
        secret_value=""
        vault_access_token=""
        echo "   az keyvault secret show --vault-name $KEY_VAULT_NAME --name $KEY_VAULT_SECRET_NAME"
        if ! secret_value=$(timeout 10 az keyvault secret show --vault-name $KEY_VAULT_NAME --name $KEY_VAULT_SECRET_NAME --query value -o tsv 2>/dev/null); then
          echo -e "   $KEY_VAULT_SECRET_NAME: timed out!"
          echo -e "   Fallback: Get access token for vault.azure.net via metadata ..."
          if ! vault_access_token=$(timeout 10 curl -H Metadata:true "http://169.254.169.254/metadata/identity/oauth2/token?resource=https%3A%2F%2Fvault.azure.net&api-version=2018-02-01" -s | jq -r .access_token); then
            echo -e "   Vault token: timed out!"
          else
            echo "curl https://$KEY_VAULT_NAME.vault.azure.net/secrets/message?api-version=7.2"
            secret_value=$(timeout 10 curl -H "Cache-Control: no-cache" -H "Pragma: no-cache" -H "Authorization : Bearer $vault_access_token" "https://$KEY_VAULT_NAME.vault.azure.net/secrets/message?api-version=7.2" -o secret.txt 2>/dev/null)
          fi
        fi
      
        if [ "$secret_value" = "$KEY_VAULT_SECRET_VALUE" ]; then
          echo -e "   $KEY_VAULT_SECRET_NAME: $secret_value"
          echo -e "   Vault Dataplane: Pass"
          KEYVAULT_ACCESS=Pass
        else
          echo -e "   $KEY_VAULT_SECRET_NAME: not found!"
          echo -e "   Vault Dataplane: Fail"
          KEYVAULT_ACCESS=Fail
        fi
      }
      
      check_address_type
      check_service_endpoints "$SUBNET_NAME"
      check_private_subnet "$SUBNET_NAME"
      check_internet_access
      check_management_access
      download_blob
      access_keyvault_secret
      
      echo -e "\n-------------------------------------------"
      echo -e "Results"
      echo -e "-------------------------------------------"
      echo -e "1. Public IP: \t$PUBLIC_ADDRESS"
      echo -e "2. Service Endpoints: \t$SERVICE_ENDPOINT_STATUS ($SERVICE_ENDPOINTS)"
      echo -e "3. Private Subnet: \t$PRIVATE_SUBNET"
      echo -e "4. Internet Access: \t$INTERNET_ACCESS"
      echo -e "5. Management Access: \t$MANAGEMENT_ACCESS"
      echo -e "6. Blob Dataplane: \t$BLOB_ACCESS"
      echo -e "7. KeyVault Dataplane: \t$KEYVAULT_ACCESS"
      echo -e "-------------------------------------------\n"
      
  - path: /var/lib/azure/crawler/app/requirements.txt
    owner: root
    permissions: 0744
    content: |
      certifi==2024.2.2
      charset-normalizer==3.3.2
      idna==3.6
      requests==2.31.0
      urllib3==2.2.1
      
  - path: /var/lib/azure/crawler/app/service_tags.py
    owner: root
    permissions: 0744
    content: |
      import os
      import sys
      import json
      import ipaddress
      
      with open('service_tags.json', 'r') as file:
          data = json.load(file)
      
      def locate_IP_range(ip_address):
          target_ip = ipaddress.ip_address(ip_address)
          matches = []
      
          for value in data['values']:
              for prefix in value['properties']['addressPrefixes']:
                  if target_ip in ipaddress.ip_network(prefix):
                      matches.append(f"   - {ipaddress.ip_network(prefix)} <-- {value['id']} ({value['properties']['region']})")
      
          for match in matches:
              print(match)
      
      def main():
          if len(sys.argv) < 2:
              print("Usage: python service_tags.py <ip_address>")
              sys.exit(1)
      
          ip_address = sys.argv[1]
          locate_IP_range(ip_address)
      
      if __name__ == "__main__":
          main()
      
  - path: /var/lib/azure/fastapi/app/app/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine
      
      WORKDIR /app
      COPY . .
      RUN pip install --verbose --no-cache-dir -r requirements.txt
      CMD ["python3", "main.py"]
      
  - path: /var/lib/azure/fastapi/app/app/_app.py
    owner: root
    permissions: 0744
    content: |
      import os
      import socket
      from fastapi import APIRouter, Request, HTTPException
      
      router = APIRouter()
      
      hostname = socket.gethostname()
      ipv4_address = socket.gethostbyname(hostname)
      
      try:
          ipv6_address = socket.getaddrinfo(hostname, None, socket.AF_INET6)[0][4][0]
      except socket.gaierror:
          ipv6_address = "NotFound"
      
      def generate_data_dict(app_name, request):
          return {
              'app': app_name,
              'hostname': os.getenv('HOST_HOSTNAME', hostname),
              'server-ipv4': os.getenv('HOST_IPV4', ipv4_address),
              'server-ipv6': os.getenv('HOST_IPV6', ipv6_address),
              'remote-addr': request.client.host,
              'headers': dict(request.headers)
          }
      
      @router.get("/")
      async def default(request: Request):
          return generate_data_dict('SERVER', request)
      
      @router.get("/path1")
      async def path1(request: Request):
          return generate_data_dict('SERVER-PATH1', request)
      
      @router.get("/path2")
      async def path2(request: Request):
          return generate_data_dict('SERVER-PATH2', request)
      
      @router.get("/healthz")
      async def healthz(request: Request):
          # Example of adding specific logic for a particular endpoint if needed
          # allowed_hosts = ["healthz.az.corp"]
          # if request.client.host not in allowed_hosts:
          #     raise HTTPException(status_code=403, detail="Access denied")
          return "OK"
      
  - path: /var/lib/azure/fastapi/app/app/main.py
    owner: root
    permissions: 0744
    content: |
      from fastapi import FastAPI, Request, Response, HTTPException
      from fastapi.middleware.cors import CORSMiddleware
      from fastapi.responses import JSONResponse
      from _app import router as app_router
      import json
      import ssl
      import uvicorn
      
      class PrettyJSONResponse(Response):
          media_type = "application/json"
      
          def render(self, content: any) -> bytes:
              return json.dumps(content, indent=2).encode('utf-8')
      
      app = FastAPI(default_response_class=PrettyJSONResponse)
      
      # CORS middleware
      app.add_middleware(
          CORSMiddleware,
          allow_origins=["*"],  # Replace * with actual frontend domain
          allow_credentials=True,
          allow_methods=["*"],
          allow_headers=["*"],
      )
      
      # Custom middleware to add Access-Control-Allow-Origin header
      @app.middleware("http")
      async def add_cors_header(request, call_next):
          response = await call_next(request)
          response.headers["Access-Control-Allow-Origin"] = "*"
          return response
      
      # Include the API router
      app.include_router(app_router, tags=["Features"])
      
  - path: /var/lib/azure/fastapi/app/app/requirements.txt
    owner: root
    permissions: 0744
    content: |
      cryptography==41.0.7
      fastapi==0.105.0
      uvicorn==0.25.0
      
  - path: /var/lib/azure/fastapi/docker-compose-app1-80.yml
    owner: root
    permissions: 0744
    content: |
      version: '3'
      services:
        app1-80:
          container_name: app1-80
          build:
            context: ./app/app
            dockerfile: Dockerfile
          network_mode: host
          command: uvicorn main:app --host '0.0.0.0' --port 80
          restart: always
        app1-ipv6-80:
          container_name: app1-ipv6-80
          build:
            context: ./app/app
            dockerfile: Dockerfile
          network_mode: host
          command: uvicorn main:app --host '::' --port 80
          restart: always
      
  - path: /var/lib/azure/fastapi/docker-compose-app2-8080.yml
    owner: root
    permissions: 0744
    content: |
      version: '3'
      services:
        app2-8080:
          container_name: app2-8080
          build:
            context: ./app/app
            dockerfile: Dockerfile
          network_mode: host
          command: uvicorn main:app --host '0.0.0.0' --port 8080
          restart: always
        app2-ipv6-8080:
          container_name: app2-ipv6-8080
          build:
            context: ./app/app
            dockerfile: Dockerfile
          network_mode: host
          command: uvicorn main:app --host '::' --port 8080
          restart: always
      
  - path: /var/lib/azure/init/startup.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      exec > /var/log/azure-startup.log
      
      apt update
      apt install -y python3-pip python3-dev python3-venv unzip jq tcpdump dnsutils net-tools nmap apache2-utils iperf3
      
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      az login --identity || true
      
      ########################################################
      # test scripts (ipv4)
      ########################################################
      
      # ping-ipv4
      
      cat <<'EOF' > /usr/local/bin/ping-ipv4
      echo -e "\n ping ipv4 ...\n"
      echo "proxy    - 10.0.2.4 -$(timeout 3 ping -4 -qc2 -W1 10.0.2.4 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      echo "proxy    - 10.0.3.4 -$(timeout 3 ping -4 -qc2 -W1 10.0.3.4 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      echo "proxy    - 10.0.3.5 -$(timeout 3 ping -4 -qc2 -W1 10.0.3.5 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      echo "internet - icanhazip.com -$(timeout 3 ping -4 -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-ipv4
      
      # ping-dns4
      
      cat <<'EOF' > /usr/local/bin/ping-dns4
      echo -e "\n ping dns ipv4 ...\n"
      echo "proxy.eu.az.corp - $(timeout 3 dig +short proxy.eu.az.corp | tail -n1) -$(timeout 3 ping -4 -qc2 -W1 proxy.eu.az.corp 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      echo "server1.eu.az.corp - $(timeout 3 dig +short server1.eu.az.corp | tail -n1) -$(timeout 3 ping -4 -qc2 -W1 server1.eu.az.corp 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      echo "server2.eu.az.corp - $(timeout 3 dig +short server2.eu.az.corp | tail -n1) -$(timeout 3 ping -4 -qc2 -W1 server2.eu.az.corp 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      echo "icanhazip.com - $(timeout 3 dig +short icanhazip.com | tail -n1) -$(timeout 3 ping -4 -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-dns4
      
      # curl-ipv4
      
      cat <<'EOF' > /usr/local/bin/curl-ipv4
      echo -e "\n curl ipv4 ...\n"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null [10.0.2.4]) - proxy    [10.0.2.4]"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null [10.0.3.4]) - proxy    [10.0.3.4]"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null [10.0.3.5]) - proxy    [10.0.3.5]"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null [icanhazip.com]) - internet [icanhazip.com]"
      EOF
      chmod a+x /usr/local/bin/curl-ipv4
      
      # curl-dns4
      
      cat <<'EOF' > /usr/local/bin/curl-dns4
      echo -e "\n curl dns ipv4 ...\n"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null proxy.eu.az.corp) - proxy.eu.az.corp"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null server1.eu.az.corp) - server1.eu.az.corp"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null server2.eu.az.corp) - server2.eu.az.corp"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null icanhazip.com) - icanhazip.com"
      echo  "$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null https://lab10hub10625.blob.core.windows.net/storage/storage.txt) - https://lab10hub10625.blob.core.windows.net/storage/storage.txt"
      EOF
      chmod a+x /usr/local/bin/curl-dns4
      
      # trace-ipv4
      
      cat <<'EOF' > /usr/local/bin/trace-ipv4
      echo -e "\n trace ipv4 ...\n"
      echo -e "\nproxy   "
      echo -e "-------------------------------------"
      timeout 9 tracepath -4 10.0.2.4
      echo -e "\nproxy   "
      echo -e "-------------------------------------"
      timeout 9 tracepath -4 10.0.3.4
      echo -e "\nproxy   "
      echo -e "-------------------------------------"
      timeout 9 tracepath -4 10.0.3.5
      echo -e "\ninternet"
      echo -e "-------------------------------------"
      timeout 9 tracepath -4 icanhazip.com
      EOF
      chmod a+x /usr/local/bin/trace-ipv4
      
      ########################################################
      # test scripts (ipv6)
      ########################################################
      
      # ping-ipv6
      
      cat <<'EOF' > /usr/local/bin/ping-ipv6
      echo -e "\n ping ipv6 ...\n"
      echo "internet - icanhazip.com -$(timeout 3 ping -6 -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-ipv6
      
      # ping-dns6
      
      cat <<'EOF' > /usr/local/bin/ping-dns6
      echo -e "\n ping dns ipv6 ...\n"
      echo "icanhazip.com - $(timeout 3 dig AAAA +short icanhazip.com | tail -n1) -$(timeout 3 ping -6 -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-dns6
      
      # curl-ipv6
      
      cat <<'EOF' > /usr/local/bin/curl-ipv6
      echo -e "\n curl ipv6 ...\n"
      echo  "$(timeout 3 curl -6 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null [icanhazip.com]) - internet [icanhazip.com]"
      EOF
      chmod a+x /usr/local/bin/curl-ipv6
      
      # curl-dns6
      
      cat <<'EOF' > /usr/local/bin/curl-dns6
      echo -e "\n curl dns ipv6 ...\n"
      echo  "$(timeout 3 curl -6 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null proxy.eu.az.corp) - proxy.eu.az.corp"
      echo  "$(timeout 3 curl -6 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null server1.eu.az.corp) - server1.eu.az.corp"
      echo  "$(timeout 3 curl -6 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null server2.eu.az.corp) - server2.eu.az.corp"
      echo  "$(timeout 3 curl -6 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null icanhazip.com) - icanhazip.com"
      echo  "$(timeout 3 curl -6 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null https://lab10hub10625.blob.core.windows.net/storage/storage.txt) - https://lab10hub10625.blob.core.windows.net/storage/storage.txt"
      EOF
      chmod a+x /usr/local/bin/curl-dns6
      
      # trace-ipv6
      
      cat <<'EOF' > /usr/local/bin/trace-ipv6
      echo -e "\n trace ipv6 ...\n"
      echo -e "\ninternet"
      echo -e "-------------------------------------"
      timeout 9 tracepath -6 icanhazip.com
      EOF
      chmod a+x /usr/local/bin/trace-ipv6
      
      ########################################################
      # other scripts
      ########################################################
      
      # dns-info
      
      cat <<'EOF' > /usr/local/bin/dns-info
      echo -e "\n resolvectl ...\n"
      resolvectl status
      EOF
      chmod a+x /usr/local/bin/dns-info
      
      # azure service tester
      
      tee /usr/local/bin/crawlz <<'EOF'
      sudo bash -c "cd /var/lib/azure/crawler/app && ./crawler.sh"
      EOF
      chmod a+x /usr/local/bin/crawlz
      
      ########################################################
      # traffic generators (ipv4)
      ########################################################
      
      # light-traffic generator
      
      cat <<'EOF' > /usr/local/bin/light-traffic
      nping -c 5 --tcp-connect -p 80,8080 proxy.eu.az.corp > /dev/null 2>&1
      nping -c 5 --tcp-connect -p 80,8080 server1.eu.az.corp > /dev/null 2>&1
      nping -c 5 --tcp-connect -p 80,8080 server2.eu.az.corp > /dev/null 2>&1
      nping -c 5 --tcp-connect -p 80,8080 https://lab10hub10625.blob.core.windows.net/storage/storage.txt > /dev/null 2>&1
      EOF
      chmod a+x /usr/local/bin/light-traffic
      
      # heavy-traffic generator
      
      cat <<'EOF' > /usr/local/bin/heavy-traffic
      #! /bin/bash
      i=0
      while [ $i -lt 5 ]; do
          ab -n $1 -c $2 proxy.eu.az.corp > /dev/null 2>&1
          ab -n $1 -c $2 server1.eu.az.corp > /dev/null 2>&1
          ab -n $1 -c $2 server2.eu.az.corp > /dev/null 2>&1
          ab -n $1 -c $2 https://lab10hub10625.blob.core.windows.net/storage/storage.txt > /dev/null 2>&1
          let i=i+1
        sleep 5
      done
      EOF
      chmod a+x /usr/local/bin/heavy-traffic
      
      ########################################################
      # traffic generators (ipv6)
      ########################################################
      
      # light-traffic generator
      
      cat <<'EOF' > /usr/local/bin/light-traffic-ipv6
      nping -c 5 -6 --tcp-connect -p 80,8080 proxy.eu.az.corp > /dev/null 2>&1
      nping -c 5 -6 --tcp-connect -p 80,8080 server1.eu.az.corp > /dev/null 2>&1
      nping -c 5 -6 --tcp-connect -p 80,8080 server2.eu.az.corp > /dev/null 2>&1
      nping -c 5 -6 --tcp-connect -p 80,8080 https://lab10hub10625.blob.core.windows.net/storage/storage.txt > /dev/null 2>&1
      EOF
      chmod a+x /usr/local/bin/light-traffic-ipv6
      
      # heavy-traffic generator
      
      cat <<'EOF' > /usr/local/bin/heavy-traffic-ipv6
      #! /bin/bash
      
      get_ipv6() {
        ipv6=$(host -t AAAA $1 | awk '/has IPv6 address/ {print $5}')
        if [ -z "$ipv6" ]; then
          echo $1
        else
          echo $ipv6
        fi
      }
      
      i=0
      while [ $i -lt 8 ]; do
          ab -s 3 -n $1 -c $2 [$(get_ipv6 proxy.eu.az.corp)]/ > /dev/null 2>&1
        # check if ab command was successful
        if [ $? -ne 0 ]; then
          echo "target: proxy.eu.az.corp failed"
          exit 1
        else
          echo "target: proxy.eu.az.corp passed"
        fi
          ab -s 3 -n $1 -c $2 [$(get_ipv6 server1.eu.az.corp)]/ > /dev/null 2>&1
        # check if ab command was successful
        if [ $? -ne 0 ]; then
          echo "target: server1.eu.az.corp failed"
          exit 1
        else
          echo "target: server1.eu.az.corp passed"
        fi
          ab -s 3 -n $1 -c $2 [$(get_ipv6 server2.eu.az.corp)]/ > /dev/null 2>&1
        # check if ab command was successful
        if [ $? -ne 0 ]; then
          echo "target: server2.eu.az.corp failed"
          exit 1
        else
          echo "target: server2.eu.az.corp passed"
        fi
          ab -s 3 -n $1 -c $2 [$(get_ipv6 https://lab10hub10625.blob.core.windows.net/storage/storage.txt)]/ > /dev/null 2>&1
        # check if ab command was successful
        if [ $? -ne 0 ]; then
          echo "target: https://lab10hub10625.blob.core.windows.net/storage/storage.txt failed"
          exit 1
        else
          echo "target: https://lab10hub10625.blob.core.windows.net/storage/storage.txt passed"
        fi
          let i=i+1
        sleep 5
      done
      EOF
      chmod a+x /usr/local/bin/heavy-traffic-ipv6
      
      ########################################################
      # crontabs
      ########################################################
      
      cat <<'EOF' > /etc/cron.d/traffic-gen
      */1 * * * * /usr/local/bin/light-traffic 2>&1 > /dev/null
      */1 * * * * /usr/local/bin/heavy-traffic 15 1 2>&1 > /dev/null
      */2 * * * * /usr/local/bin/heavy-traffic 3 1 2>&1 > /dev/null
      */3 * * * * /usr/local/bin/heavy-traffic 8 2 2>&1 > /dev/null
      */5 * * * * /usr/local/bin/heavy-traffic 5 1 2>&1 > /dev/null
      EOF
      
      crontab /etc/cron.d/traffic-gen
      
  - path: /var/lib/azure/squid/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3.7'
      services:
        squid:
          container_name: squid
          image: ubuntu/squid:latest
          ports:
            - "3128:3128"
          network_mode: "host"
          volumes:
            - /etc/squid/squid.conf:/etc/squid/squid.conf
            - /etc/squid/blocked_sites:/etc/squid/blocked_sites
            - /var/log/squid/access.log:/var/log/squid/access.log
            - /var/log/squid/cache.log:/var/log/squid/cache.log
            - /var/log/squid/store.log:/var/log/squid/store.log
          restart: always
      
  - path: /var/lib/azure/squid/setup-squid.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      mkdir -p /var/log/squid
      touch /var/log/squid/access.log
      touch /var/log/squid/cache.log
      touch /var/log/squid/store.log
      chown proxy:proxy /var/log/squid/*
      chmod a+x /var/log/squid/*
      
  - path: /var/lib/azure/unbound/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM alpine:3.19.0
      RUN apk add --no-cache unbound
      EXPOSE 53/tcp 53/udp
      CMD ["unbound", "-d"]
      
  - path: /var/lib/azure/unbound/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3'
      
      services:
        unbound:
          container_name: unbound
          build:
            context: .
            dockerfile: Dockerfile
          ports:
            - "53:53/tcp"
            - "53:53/udp"
          network_mode: "host"
          volumes:
            - /etc/unbound/unbound.log:/etc/unbound/unbound.log
            - /etc/unbound/unbound.conf:/etc/unbound/unbound.conf
          cap_add:
            - NET_ADMIN
          command: ["unbound", "-d"]
          restart: always
      
  - path: /var/lib/azure/unbound/setup-unbound.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      exec > /var/log/azure-setup-unbound.log
      
      systemctl stop systemd-resolved
      systemctl disable systemd-resolved
      echo "nameserver 8.8.8.8" > /etc/resolv.conf
      echo "$(hostname -I | cut -d' ' -f1) $(hostname)" | tee -a /etc/hosts >/dev/null
      mkdir -p /etc/unbound
      touch /etc/unbound/unbound.log && chmod a+x /etc/unbound/unbound.log
      apt-get install -y resolvconf
      

runcmd:
  - sysctl -w net.ipv4.ip_forward=1
  - sysctl -w net.ipv4.conf.eth0.disable_xfrm=1
  - sysctl -w net.ipv4.conf.eth0.disable_policy=1
  - echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
  - sysctl -w net.ipv6.conf.all.forwarding=1
  - echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf
  - sysctl -p
  - echo iptables-persistent iptables-persistent/autosave_v4 boolean false | debconf-set-selections
  - echo iptables-persistent iptables-persistent/autosave_v6 boolean false | debconf-set-selections
  - apt-get -y install iptables-persistent
  - iptables -P FORWARD ACCEPT
  - iptables -P INPUT ACCEPT
  - iptables -P OUTPUT ACCEPT
  - iptables -t nat -A POSTROUTING -d 10.0.0.0/8 -j ACCEPT
  - iptables -t nat -A POSTROUTING -d 172.16.0.0/12 -j ACCEPT
  - iptables -t nat -A POSTROUTING -d 192.168.0.0/16 -j ACCEPT
  - iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
  - . /var/lib/azure/init/startup.sh
  - . /var/lib/azure/unbound/setup-unbound.sh
  - . /var/lib/azure/squid/setup-squid.sh
  - docker-compose -f /var/lib/azure/unbound/docker-compose.yml up -d
  - docker-compose -f /var/lib/azure/squid/docker-compose.yml up -d
