#cloud-config

package_update: true
package_upgrade: true
packages:
  - docker.io
  - docker-compose
  - dnsutils
  - net-tools

write_files:
  - path: /etc/squid/blocked_sites
    owner: root
    permissions: 0744
    content: |
      google.com
      bbc.co.uk
      
  - path: /etc/squid/squid.conf
    owner: root
    permissions: 0744
    content: |
      # squid.conf
      http_port 3128
      
      acl blocked_sites dstdomain "/etc/squid/blocked_sites"
      http_access deny blocked_sites
      
      http_access allow all
      
      # Enable logging
      access_log /var/log/squid/access.log squid
      cache_log /var/log/squid/cache.log
      cache_store_log /var/log/squid/store.log
      
  - path: /etc/unbound/unbound.conf
    owner: root
    permissions: 0744
    content: |
      
      server:
          interface: 0.0.0.0
      
          access-control: 0.0.0.0 deny
          access-control: 127.0.0.0/8 allow
          access-control: 10.0.0.0/8 allow
          access-control: 192.168.0.0/16 allow
          access-control: 172.16.0.0/12 allow
          access-control: 35.199.192.0/19 allow
      
          local-data: "server1.eu.az.corp 3600 IN A 10.0.3.4"
          local-data: "server2.eu.az.corp 3600 IN A 10.0.3.5"
          local-data: "proxy.eu.az.corp 3600 IN A 10.0.2.4"
      
      forward-zone:
          name: "."
          forward-addr: 168.63.129.16
      
  - path: /var/lib/azure/crawler/app/crawler.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      char_pass="\u2714"
      char_fail="\u274c"
      char_question="\u2753"
      char_notfound="\u26D4"
      char_exclamation="\u2757"
      char_celebrate="\u2B50"
      char_executing="\u23F3"
      
      bold=$(tput bold)
      color_green=$(tput setaf 2)
      color_red=$(tput setaf 1)
      reset=$(tput sgr0)
      
      echo -e "\n$boldAzure Service Crawler initiating ...$reset\n"
      
      export METADATA=$(curl -s -H Metadata:true "http://169.254.169.254/metadata/instance?api-version=2021-02-01&format=json")
      export VM_NAME=$(echo $METADATA | jq -r '.compute.name')
      export RESOURCE_GROUP=$(echo $METADATA | jq -r '.compute.resourceGroupName')
      export LOCATION=$(echo $METADATA | jq -r '.compute.location')
      export SUBNET_NETWORK=$(echo $METADATA | jq -r '.network.interface[].ipv4.subnet[].address')
      export SUBNET_MASK=$(echo $METADATA | jq -r '.network.interface[].ipv4.subnet[].prefix')
      
      export SERVICE_TAGS_DOWNLOAD_LINK="https://download.microsoft.com/download/7/1/D/71D86715-5596-4529-9B13-DA13A5DE5B63/ServiceTags_Public_20240318.json"
      export ETH0_IP=$(hostname -I | awk '{print $1}')
      echo -e "* Extracting az token..."
      export TOKEN=$(timeout 10 az account get-access-token --query accessToken -o tsv 2>/dev/null)
      echo -e "* Getting storage account key..."
      export ACCOUNT_KEY=$(timeout 10 az storage account keys list -g $RESOURCE_GROUP --account-name g10hub33bc --query '[0].value' -o tsv 2>/dev/null)
      echo "* Retrieving VNET name..."
      export VNET_NAME=$(timeout 10 az network vnet list -g $RESOURCE_GROUP --query '[0].name' -o tsv 2>/dev/null)
      echo "* Extracting subnet name..."
      export SUBNET=$(timeout 15 python3 find_subnet.py "$ETH0_IP" 2>/dev/null)
      echo -e "* Downloading service tags JSON..."
      curl -s $SERVICE_TAGS_DOWNLOAD_LINK > service_tags.json
      
      echo -e "\n-------------------------------------"
      echo -e "Environment"
      echo -e "-------------------------------------"
      echo "VM Name:        $VM_NAME"
      echo "Resource Group: $RESOURCE_GROUP"
      echo "Location:       $LOCATION"
      echo "VNET Name:      $VNET_NAME"
      echo "Subnet Name:    $SUBNET"
      echo "Subnet Prefix:  $SUBNET_NETWORK/$SUBNET_MASK"
      echo "Private IP:     $ETH0_IP"
      echo -e "-------------------------------------"
      
      declare -a PUBLIC_ADDRESS_TYPE
      declare -a SERVICE_ENDPOINTS
      declare -a PRIVATE_SUBNET
      declare -a INTERNET_ACCESS
      declare -a MANAGEMENT_ACCESS
      declare -a BLOB_ACCESS
      declare -a KEYVAULT_ACCESS
      
      function check_address_type() {
        #####################################################
        echo -e "\n1. Check Public Address Type"
        #####################################################
        local public_ip=$(timeout 10 curl -s ifconfig.me)
        echo -e "   Local IP:\t$ETH0_IP"
        echo -e "   Public IP:\t$public_ip"
      
        ips=$(timeout 10 az network public-ip list -g $RESOURCE_GROUP --query "[].{ip:ipAddress, name:name, id:id}" -o tsv 2>/dev/null)
        local found=0
        while IFS= read -r line; do
            ip=$(echo $line | awk '{print $1}')
            name=$(echo $line | awk '{print $2}')
            id=$(echo $line | awk '{print $3}')
      
            if [[ "$ip" == "$public_ip" ]]; then
                if [[ $name == *"snat-feip-pip"* ]]; then
                    echo -e "   Address type: SnatIP"
                    PUBLIC_ADDRESS_TYPE=("SnatIP")
                elif [[ $name == *"natgw-pip"* ]]; then
                    echo -e "   Address type: NatGw"
                    PUBLIC_ADDRESS_TYPE=("NatGw")
                elif [[ $name == *"nic-pip"* ]]; then
                    echo -e "   Address type: VmPublicIp"
                    PUBLIC_ADDRESS_TYPE=("VmPublicIp")
                else
                    echo -e "   Address type: None"
                    PUBLIC_ADDRESS_TYPE=("None")
                fi
                found=1
                break
            fi
        done <<< "$ips"
      
        if [[ $found -eq 0 ]]; then
            PUBLIC_ADDRESS_TYPE=("None")
            echo -e "   NAT_IP type:\tNone"
        fi
      }
      
      function check_service_endpoints() {
        subnet=$1
        #####################################################
        echo -e "\n2. Check Service Endpoints"
        #####################################################
        echo -e "   Subnet --> $SUBNET"
        service_endpoints=$(az network vnet subnet show -g $RESOURCE_GROUP --vnet-name $VNET_NAME --name $SUBNET --query "serviceEndpoints[].service" -o tsv 2>/dev/null)
        if [ -z "$service_endpoints" ]; then
          echo -e "   Service EP: False"
          SERVICE_ENDPOINTS=("False")
        else
          echo -e "   Service EP: True"
          echo "$service_endpoints" | tr '\t' '\n' | awk '{print "  - " $0}'
          SERVICE_ENDPOINTS=("True")
        fi
      }
      
      function check_private_subnet() {
        subnet=$1
        #####################################################
        echo -e "\n3. Check Private Subnet"
        #####################################################
        echo -e "   Subnet --> $SUBNET"
        default_outbound_access=$(az network vnet subnet list --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --query "[?name=='$SUBNET'].defaultOutboundAccess" -o tsv 2>/dev/null)
        if [ -z "$default_outbound_access" ];
          then default_outbound_access="true"
        fi
        echo -e "   DefaultOutbound: $default_outbound_access"
      
        if [ "$default_outbound_access" == "false" ]; then
          echo -e "   Private Subnet:  True"
          PRIVATE_SUBNET=True
        else
          echo -e "   Private Subnet:  False"
          PRIVATE_SUBNET=False
        fi
      }
      
      function check_internet_access() {
        #####################################################
        echo -e "\n4. Check Internet Access"
        #####################################################
        url="http://contoso.com"
        echo "   Connecting to $url ..."
        internet_access=$(timeout 10 python3 service_access.py "$url" "" 2>/dev/null)
        if [ "$internet_access" == "200" ]; then
          echo -e "   Access: Yes ($internet_access)"
          INTERNET_ACCESS="Yes"
        else
          echo -e "   Access: No ($internet_access)"
          INTERNET_ACCESS="No"
        fi
      }
      
      function resolve_dns() {
        local host=$1
        dns_result=$(host "$host" 2>/dev/null)
        if echo "$dns_result" | grep -q "has address"; then
          ip_address=$(echo "$dns_result" | awk '/has address/ { print $4 }' | head -n 1)
          echo -e  "   $ip_address <-- $host"
        else
          echo -e  "   $dns_result"
        fi
      }
      
      function get_azure_service_tag_from_host() {
        local service=$1
        local ip_address=$(host "$service" | awk '/has address/ { print $4 }' | head -n 1 2>/dev/null)
        python3 service_tags.py "$ip_address" "service_tags.json" 2>/dev/null
      }
      
      function check_management_access() {
        local service=$1
        #####################################################
        echo -e "\n5. Management (Control Plane)"
        #####################################################
        resolve_dns $service 2>/dev/null
        get_azure_service_tag_from_host $service
        local url="https://management.azure.com/subscriptions?api-version=2020-01-01"
        echo -e "   Testing access to $service"
        management_access=$(timeout 10 python3 service_access.py $url $TOKEN 2>/dev/null)
      
        if [ "$management_access" == "200" ]; then
          MANAGEMENT_ACCESS=Yes
          echo -e "   Access: Yes"
        else
          MANAGEMENT_ACCESS=No
          echo -e "   Access: No"
        fi
      }
      
      function download_blob() {
        local account_name=$1
        local container_name=$2
        local blob_name=$3
        #####################################################
        echo -e "\n6. Blob (Data Plane)"
        #####################################################
        local blob_url=$(az storage blob url --account-name $account_name --container-name $container_name --name $blob_name --account-key $ACCOUNT_KEY -o tsv 2>/dev/null)
        host=$(echo $blob_url | awk -F/ '{print $3}')
        echo -e "   url = $blob_url"
        echo -e "   host = $host"
        resolve_dns $host 2>/dev/null
        get_azure_service_tag_from_host $host 2>/dev/null
      
        echo "   Retrieving blob content ..."
        blob_access=$(az storage blob download --account-name $account_name -c $container_name -n $blob_name --account-key $ACCOUNT_KEY --query content -o tsv 2>/dev/null)
        if [ "$blob_access" = "Hello, World!" ]; then
          echo -e  "   Content: $blob_access"
          echo -e  "   Access: Yes"
          BLOB_ACCESS=Yes
        else
          echo -e  "   Blob download: failed!"
          echo -e  "   Access: No"
          BLOB_ACCESS=No
        fi
      }
      
      function access_keyvault_secret() {
        local keyvault_name=$1
        local secret_name=$2
        #####################################################
        echo -e "\n7. KeyVault (Data Plane)"
        #####################################################
        local keyvault_secret_url=$(timeout 10 az keyvault secret show --vault-name $keyvault_name --name $secret_name --query id -o tsv 2>/dev/null)
        host=$(echo $keyvault_secret_url | awk -F/ '{print $3}')
        echo -e "   url: https://$host/secrets/$secret_name/<ID>"
        echo -e "   host: $host"
        resolve_dns $host
        get_azure_service_tag_from_host $host 2>/dev/null
      
        echo "   Accessing secret ..."
        secret_value=$(timeout 10 az keyvault secret show --vault-name $keyvault_name --name $secret_name --query value -o tsv 2>/dev/null)
        if [ "$secret_value" = "Hello, world!" ]; then
          echo -e "   $2: $secret_value"
          echo -e "   Access: Yes"
          KEYVAULT_ACCESS=Yes
        else
          echo -e "   $2: not found!"
          echo -e "   Access: No"
          KEYVAULT_ACCESS=No
        fi
      }
      
      check_address_type
      check_service_endpoints $SUBNET
      check_private_subnet $SUBNET
      check_internet_access
      check_management_access "management.azure.com"
      download_blob "g10hub33bc" "storage" "storage.txt"
      access_keyvault_secret "g10-hub-kv33bc" "message"
      rm service_tags.json
      
      echo -e "\n-------------------------------------"
      echo -e "Results"
      echo -e "-------------------------------------"
      echo -e "1. NAT_IP_Type: \t$PUBLIC_ADDRESS_TYPE"
      echo -e "2. Service_Endpoints: \t$SERVICE_ENDPOINTS"
      echo -e "3. Private_Subnet: \t$PRIVATE_SUBNET"
      echo -e "4. Internet_Access: \t$INTERNET_ACCESS"
      echo -e "5. Management_Access: \t$MANAGEMENT_ACCESS"
      echo -e "6. Blob_Access: \t$BLOB_ACCESS"
      echo -e "7. KeyVault_Access: \t$KEYVAULT_ACCESS"
      echo -e "-------------------------------------\n"
      
  - path: /var/lib/azure/crawler/app/find_subnet.py
    owner: root
    permissions: 0744
    content: |
      import os
      import ipaddress
      import subprocess
      import json
      import sys
      
      RESOURCE_GROUP = os.getenv('RESOURCE_GROUP')
      VNET_NAME = os.getenv('VNET_NAME')
      
      def get_ip_address():
          cmd = "hostname -I | awk '{print $1}'"
          process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
          stdout, stderr = process.communicate()
          if process.returncode == 0:
              return stdout.decode('utf-8').strip()
          else:
              raise Exception("Error getting IP address: " + stderr.decode('utf-8'))
      
      def get_vnet_subnets():
          cmd = f"az network vnet subnet list --resource-group {RESOURCE_GROUP} --vnet-name {VNET_NAME} -o json"
          process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
          stdout, stderr = process.communicate()
          if process.returncode == 0:
              subnets = json.loads(stdout.decode('utf-8'))
              subnets_list = []
              for subnet in subnets:
                  if 'addressPrefix' in subnet:
                      subnets_list.append((subnet['name'], subnet['addressPrefix']))
                  elif 'addressPrefixes' in subnet:
                      for prefix in subnet['addressPrefixes']:
                          subnets_list.append((subnet['name'], prefix))
              return subnets_list
          else:
              raise Exception("Error listing VNET subnets: " + stderr.decode('utf-8'))
      
      def find_subnet_for_ip(ip_address):
          subnets = get_vnet_subnets()
          ip = ipaddress.ip_address(ip_address)
          for name, prefix in subnets:
              network = ipaddress.ip_network(prefix, strict=False)
              if ip in network:
                  return name
          return None
      
      def main():
          ip_address = sys.argv[1] if len(sys.argv) > 1 else get_ip_address()
          subnet_name = find_subnet_for_ip(ip_address)
          if subnet_name:
              print(subnet_name)
          else:
              print("None")
      
      if __name__ == '__main__':
          main()
      
  - path: /var/lib/azure/crawler/app/requirements.txt
    owner: root
    permissions: 0744
    content: |
      certifi==2024.2.2
      charset-normalizer==3.3.2
      idna==3.6
      requests==2.31.0
      urllib3==2.2.1
      
  - path: /var/lib/azure/crawler/app/service_access.py
    owner: root
    permissions: 0744
    content: |
      import sys
      import requests
      
      def test_access(url, token):
          headers = {"Authorization": f"Bearer {token}"}
          response = requests.get(url, headers=headers)
          print(response.status_code)
      
      def main():
          if len(sys.argv) < 3:
              print("Usage: python service_access.py <url> <token>")
              sys.exit(1)
      
          url = sys.argv[1]
          token = sys.argv[2]
          test_access(url, token)
      
      if __name__ == "__main__":
          main()
      
  - path: /var/lib/azure/crawler/app/service_tags.py
    owner: root
    permissions: 0744
    content: |
      import os
      import sys
      import json
      import ipaddress
      
      SUBSCRIPTION_ID = os.getenv('SUBSCRIPTION_ID')
      
      with open('service_tags.json', 'r') as file:
          data = json.load(file)
      
      def locate_IP_range(ip_address):
          target_ip = ipaddress.ip_address(ip_address)
          matches = []
      
          for value in data['values']:
              for prefix in value['properties']['addressPrefixes']:
                  if target_ip in ipaddress.ip_network(prefix):
                      matches.append(f"   - {ipaddress.ip_network(prefix)} <-- {value['id']} ({value['properties']['region']})")
      
          for match in matches:
              print(match)
      
      def main():
          if len(sys.argv) < 2:
              print("Usage: python service_tags.py <ip_address>")
              sys.exit(1)
      
          ip_address = sys.argv[1]
          print(f"   Searching for service tags matching {ip_address}")
          locate_IP_range(ip_address)
      
      if __name__ == "__main__":
          main()
      
  - path: /var/lib/azure/init/server.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      apt update
      apt install -y python3-pip python3-dev python3-venv unzip jq tcpdump dnsutils net-tools nmap apache2-utils iperf3
      
      pip3 install azure-identity
      pip3 install azure-mgmt-network
      
      apt install -y openvpn network-manager-openvpn
      sudo service network-manager restart
      
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      az login --identity || true
      
      # web server #
      pip3 install Flask requests
      
      mkdir /var/flaskapp
      mkdir /var/flaskapp/flaskapp
      mkdir /var/flaskapp/flaskapp/static
      mkdir /var/flaskapp/flaskapp/templates
      
      cat <<EOF > /var/flaskapp/flaskapp/__init__.py
      import socket
      from flask import Flask, request
      app = Flask(__name__)
      
      @app.route("/")
      def default():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      @app.route("/path1")
      def path1():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['app'] = 'PATH1-APP'
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      @app.route("/path2")
      def path2():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['app'] = 'PATH2-APP'
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      if __name__ == "__main__":
          app.run(host= '0.0.0.0', port=80, debug = True)
      EOF
      
      cat <<EOF > /etc/systemd/system/flaskapp.service
      [Unit]
      Description=Script for flaskapp service
      
      [Service]
      Type=simple
      ExecStart=/usr/bin/python3 /var/flaskapp/flaskapp/__init__.py
      ExecStop=/usr/bin/pkill -f /var/flaskapp/flaskapp/__init__.py
      StandardOutput=journal
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      systemctl daemon-reload
      systemctl enable flaskapp.service
      systemctl start flaskapp.service
      
      # test scripts
      #-----------------------------------
      
      # ping-ip
      
      cat <<EOF > /usr/local/bin/ping-ip
      echo -e "\n ping ip ...\n"
      echo "internet - contoso.com -\$(timeout 3 ping -qc2 -W1 contoso.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-ip
      
      # ping-dns
      
      cat <<EOF > /usr/local/bin/ping-dns
      echo -e "\n ping dns ...\n"
      echo "contoso.com - \$(timeout 3 dig +short contoso.com | tail -n1) -\$(timeout 3 ping -qc2 -W1 contoso.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-dns
      
      # curl-ip
      
      cat <<EOF > /usr/local/bin/curl-ip
      echo -e "\n curl ip ...\n"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null contoso.com) - internet (contoso.com)"
      EOF
      chmod a+x /usr/local/bin/curl-ip
      
      # curl-dns
      
      cat <<EOF > /usr/local/bin/curl-dns
      echo -e "\n curl dns ...\n"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null contoso.com) - contoso.com"
      EOF
      chmod a+x /usr/local/bin/curl-dns
      
      # trace-ip
      
      cat <<EOF > /usr/local/bin/trace-ip
      echo -e "\n trace ip ...\n"
      echo -e "\ninternet"
      echo -e "-------------------------------------"
      timeout 9 tracepath contoso.com
      EOF
      chmod a+x /usr/local/bin/trace-ip
      
      # dns-info
      
      cat <<EOF > /usr/local/bin/dns-info
      echo -e "\n resolvectl ...\n"
      resolvectl status
      EOF
      chmod a+x /usr/local/bin/dns-info
      
      # azure service tester
      
      tee /usr/local/bin/crawlz <<'EOF'
      sudo bash -c "cd /var/lib/azure/crawler/app && ./crawler.sh"
      EOF
      chmod a+x /usr/local/bin/crawlz
      
      # light-traffic generator
      
      
      # heavy-traffic generator
      
      
      # crontab for traffic generators
      
      cat <<EOF > /tmp/crontab.txt
      EOF
      crontab /tmp/crontab.txt
      
  - path: /var/lib/azure/squid/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3.7'
      services:
        squid:
          container_name: squid
          image: ubuntu/squid:latest
          ports:
            - "3128:3128"
          network_mode: "host"
          volumes:
            - /etc/squid/squid.conf:/etc/squid/squid.conf
            - /etc/squid/blocked_sites:/etc/squid/blocked_sites
            - /var/log/squid/access.log:/var/log/squid/access.log
            - /var/log/squid/cache.log:/var/log/squid/cache.log
            - /var/log/squid/store.log:/var/log/squid/store.log
          restart: always
      
  - path: /var/lib/azure/squid/setup-squid.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      mkdir -p /var/log/squid
      touch /var/log/squid/access.log
      touch /var/log/squid/cache.log
      touch /var/log/squid/store.log
      chown proxy:proxy /var/log/squid/*
      chmod a+x /var/log/squid/*
      
  - path: /var/lib/azure/unbound/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM alpine:3.19.0
      RUN apk add --no-cache unbound
      EXPOSE 53/tcp 53/udp
      CMD ["unbound", "-d"]
      
  - path: /var/lib/azure/unbound/docker-compose.yml
    owner: root
    permissions: 0744
    content: |
      version: '3'
      
      services:
        unbound:
          container_name: unbound
          build:
            context: .
            dockerfile: Dockerfile
          ports:
            - "53:53/tcp"
            - "53:53/udp"
          network_mode: "host"
          volumes:
            - /etc/unbound/unbound.log:/etc/unbound/unbound.log
            - /etc/unbound/unbound.conf:/etc/unbound/unbound.conf
          cap_add:
            - NET_ADMIN
          command: ["unbound", "-d"]
          restart: always
      
  - path: /var/lib/azure/unbound/setup-unbound.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      systemctl stop systemd-resolved
      systemctl disable systemd-resolved
      echo "nameserver 8.8.8.8" > /etc/resolv.conf
      echo "$(hostname -I | cut -d' ' -f1) $(hostname)" | tee -a /etc/hosts >/dev/null
      mkdir -p /etc/unbound
      touch /etc/unbound/unbound.log && chmod a+x /etc/unbound/unbound.log
      apt-get install -y resolvconf
      

runcmd:
  - . /var/lib/azure/init/server.sh
  - . /var/lib/azure/unbound/setup-unbound.sh
  - . /var/lib/azure/squid/setup-squid.sh
  - docker-compose -f /var/lib/azure/unbound/docker-compose.yml up -d
  - docker-compose -f /var/lib/azure/squid/docker-compose.yml up -d
  - python3 -m venv /var/lib/azure/crawler
