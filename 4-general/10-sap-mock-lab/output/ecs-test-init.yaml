#cloud-config

package_update: true
package_upgrade: true

write_files:
  - path: /var/lib/labs/test/crawler.sh
    owner: root
    permissions: 0744
    content: |
      #!/bin/bash
      
      token=$(az account get-access-token --query accessToken --output tsv)
      crawl_management_code=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://management.azure.com/subscriptions?api-version=2020-01-01" -H "Authorization: Bearer $token")
      echo "$crawl_management_code: management.azure.com"
      
      function dig_endpoints() {
        while IFS= read -r line
        do
          ip_address=$(host "$line" | awk '/has address/ { print $4 }' | head -n 1)
          echo "$ip_address: $line"
        done < targets.txt
      }
      
      dig_endpoints
      
      
  - path: /var/lib/labs/test/server.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      apt update
      apt install -y python3-pip python3-dev unzip jq tcpdump dnsutils net-tools nmap apache2-utils iperf3
      
      apt install -y openvpn network-manager-openvpn
      sudo service network-manager restart
      
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      az login --identity || true
      
      # web server #
      pip3 install Flask requests
      
      mkdir /var/flaskapp
      mkdir /var/flaskapp/flaskapp
      mkdir /var/flaskapp/flaskapp/static
      mkdir /var/flaskapp/flaskapp/templates
      
      cat <<EOF > /var/flaskapp/flaskapp/__init__.py
      import socket
      from flask import Flask, request
      app = Flask(__name__)
      
      @app.route("/")
      def default():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      @app.route("/path1")
      def path1():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['app'] = 'PATH1-APP'
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      @app.route("/path2")
      def path2():
          hostname = socket.gethostname()
          address = socket.gethostbyname(hostname)
          data_dict = {}
          data_dict['app'] = 'PATH2-APP'
          data_dict['Hostname'] = hostname
          data_dict['Local-IP'] = address
          data_dict['Remote-IP'] = request.remote_addr
          data_dict['Headers'] = dict(request.headers)
          return data_dict
      
      if __name__ == "__main__":
          app.run(host= '0.0.0.0', port=80, debug = True)
      EOF
      
      cat <<EOF > /etc/systemd/system/flaskapp.service
      [Unit]
      Description=Script for flaskapp service
      
      [Service]
      Type=simple
      ExecStart=/usr/bin/python3 /var/flaskapp/flaskapp/__init__.py
      ExecStop=/usr/bin/pkill -f /var/flaskapp/flaskapp/__init__.py
      StandardOutput=journal
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      systemctl daemon-reload
      systemctl enable flaskapp.service
      systemctl start flaskapp.service
      
      # test scripts
      #-----------------------------------
      
      # ping-ip
      
      cat <<EOF > /usr/local/bin/ping-ip
      echo -e "\n ping ip ...\n"
      echo "onprem - 10.10.0.5 -\$(timeout 3 ping -qc2 -W1 10.10.0.5 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      echo "internet - icanhazip.com -\$(timeout 3 ping -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-ip
      
      # ping-dns
      
      cat <<EOF > /usr/local/bin/ping-dns
      echo -e "\n ping dns ...\n"
      echo "onpremvm.corp - \$(timeout 3 dig +short onpremvm.corp | tail -n1) -\$(timeout 3 ping -qc2 -W1 onpremvm.corp 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      echo "icanhazip.com - \$(timeout 3 dig +short icanhazip.com | tail -n1) -\$(timeout 3 ping -qc2 -W1 icanhazip.com 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "\$5" ms":"NA") }')"
      EOF
      chmod a+x /usr/local/bin/ping-dns
      
      # curl-ip
      
      cat <<EOF > /usr/local/bin/curl-ip
      echo -e "\n curl ip ...\n"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null 10.10.0.5) - onprem (10.10.0.5)"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null icanhazip.com) - internet (icanhazip.com)"
      EOF
      chmod a+x /usr/local/bin/curl-ip
      
      # curl-dns
      
      cat <<EOF > /usr/local/bin/curl-dns
      echo -e "\n curl dns ...\n"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null onpremvm.corp) - onpremvm.corp"
      echo  "\$(timeout 3 curl -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null icanhazip.com) - icanhazip.com"
      EOF
      chmod a+x /usr/local/bin/curl-dns
      
      # trace-ip
      
      cat <<EOF > /usr/local/bin/trace-ip
      echo -e "\n trace ip ...\n"
      echo -e "\nonprem"
      echo -e "-------------------------------------"
      timeout 9 tracepath 10.10.0.5
      echo -e "\ninternet"
      echo -e "-------------------------------------"
      timeout 9 tracepath icanhazip.com
      EOF
      chmod a+x /usr/local/bin/trace-ip
      
      # dns-info
      
      cat <<EOF > /usr/local/bin/dns-info
      echo -e "\n resolvectl ...\n"
      resolvectl status
      EOF
      chmod a+x /usr/local/bin/dns-info
      
      # light-traffic generator
      
      
      # heavy-traffic generator
      
      
      # crontab for traffic generators
      
      cat <<EOF > /tmp/crontab.txt
      EOF
      crontab /tmp/crontab.txt
      
  - path: /var/lib/labs/test/targets.txt
    owner: root
    permissions: 0744
    content: |
      g10-ecs-kv4237.vault.azure.net
      g10ecssa4237.blob.core.windows.net

runcmd:
  - . /var/lib/labs/test/server.sh
  - /bin/bash -c 'echo export http_proxy=http://10.0.3.8:3128 >> /etc/environment'
  - /bin/bash -c 'echo export https_proxy=http://10.0.3.8:3128 >> /etc/environment'
  - /bin/bash -c 'echo export ftp_proxy=http://10.0.3.8:3128 >> /etc/environment'
  - /bin/bash -c 'echo export no_proxy=168.63.129.16,169.254.169.254,127.0.0.1,corp >> /etc/environment'
