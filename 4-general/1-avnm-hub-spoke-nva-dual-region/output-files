
####################################################
# output files
####################################################

locals {
  ouput_values = templatefile("../../scripts/outputs/dual-region.sh", {
    HUB1_VNET_NAME   = try(module.hub1.vnet.name, "")
    HUB1_VNET_RANGES = try(join(", ", module.hub1.vnet.address_space), "")
    HUB1_VM_NAME     = try(module.hub1_vm.vm.name, "")
    HUB1_VM_IP       = try(module.hub1_vm.vm.private_ip_address, "")
    HUB1_SUBNETS     = try({ for k, v in module.hub1.subnets : k => v.address_prefixes[0] }, "")

    HUB2_VNET_NAME   = try(module.hub2.vnet.name, "")
    HUB2_VNET_RANGES = try(join(", ", module.hub2.vnet.address_space), "")
    HUB2_VM_NAME     = try(module.hub2_vm.vm.name, "")
    HUB2_VM_IP       = try(module.hub2_vm.vm.private_ip_address, "")
    HUB2_SUBNETS     = try({ for k, v in module.hub2.subnets : k => v.address_prefixes[0] }, "")

    SPOKE1_VNET_NAME   = try(module.spoke1.vnet.name, "")
    SPOKE1_VNET_RANGES = try(join(", ", module.spoke1.vnet.address_space), "")
    SPOKE1_VM_NAME     = try(module.spoke1_vm.vm.name, "")
    SPOKE1_VM_IP       = try(module.spoke1_vm.vm.private_ip_address, "")
    SPOKE1_SUBNETS     = try({ for k, v in module.spoke1.subnets : k => v.address_prefixes[0] }, "")

    SPOKE2_VNET_NAME   = try(module.spoke2.vnet.name, "")
    SPOKE2_VNET_RANGES = try(join(", ", module.spoke2.vnet.address_space), "")
    SPOKE2_VM_NAME     = try(module.spoke2_vm.vm.name, "")
    SPOKE2_VM_IP       = try(module.spoke2_vm.vm.private_ip_address, "")
    SPOKE2_SUBNETS     = try({ for k, v in module.spoke2.subnets : k => v.address_prefixes[0] }, "")

    SPOKE3_VNET_NAME       = try(module.spoke3.vnet.name, "")
    SPOKE3_VNET_RANGES     = try(join(", ", module.spoke3.vnet.address_space), "")
    SPOKE3_VM_NAME         = try(module.spoke3_vm.vm.name, "")
    SPOKE3_VM_IP           = try(module.spoke3_vm.vm.private_ip_address, "")
    SPOKE3_SUBNETS         = try({ for k, v in module.spoke3.subnets : k => v.address_prefixes[0] }, "")
    SPOKE3_APP_SERVICE_URL = try(module.spoke3_apps.url, "")

    SPOKE4_VNET_NAME   = try(module.spoke4.vnet.name, "")
    SPOKE4_VNET_RANGES = try(join(", ", module.spoke4.vnet.address_space), "")
    SPOKE4_VM_NAME     = try(module.spoke4_vm.vm.name, "")
    SPOKE4_VM_IP       = try(module.spoke4_vm.vm.private_ip_address, "")
    SPOKE4_SUBNETS     = try({ for k, v in module.spoke4.subnets : k => v.address_prefixes[0] }, "")

    SPOKE5_VNET_NAME   = try(module.spoke5.vnet.name, "")
    SPOKE5_VNET_RANGES = try(join(", ", module.spoke5.vnet.address_space), "")
    SPOKE5_VM_NAME     = try(module.spoke5_vm.vm.name, "")
    SPOKE5_VM_IP       = try(module.spoke5_vm.vm.private_ip_address, "")
    SPOKE5_SUBNETS     = try({ for k, v in module.spoke5.subnets : k => v.address_prefixes[0] }, "")

    SPOKE6_VNET_NAME       = try(module.spoke6.vnet.name, "")
    SPOKE6_VNET_RANGES     = try(join(", ", module.spoke6.vnet.address_space), "")
    SPOKE6_VM_NAME         = try(module.spoke6_vm.vm.name, "")
    SPOKE6_VM_IP           = try(module.spoke6_vm.vm.private_ip_address, "")
    SPOKE6_SUBNETS         = try({ for k, v in module.spoke6.subnets : k => v.address_prefixes[0] }, "")
    SPOKE6_APP_SERVICE_URL = try(module.spoke6_apps.url, "")

    BRANCH1_VNET_NAME   = try(module.branch1.vnet.name, "")
    BRANCH1_VNET_RANGES = try(join(", ", module.branch1.vnet.address_space), "")
    BRANCH1_VM_NAME     = try(module.branch1_vm.vm.name, "")
    BRANCH1_VM_IP       = try(module.branch1_vm.vm.private_ip_address, "")
    BRANCH1_SUBNETS     = try({ for k, v in module.branch1.subnets : k => v.address_prefixes[0] }, "")

    BRANCH3_VNET_NAME   = try(module.branch3.vnet.name, "")
    BRANCH3_VNET_RANGES = try(join(", ", module.branch3.vnet.address_space), "")
    BRANCH3_VM_NAME     = try(module.branch3_vm.vm.name, "")
    BRANCH3_VM_IP       = try(module.branch3_vm.vm.private_ip_address, "")
    BRANCH3_SUBNETS     = try({ for k, v in module.branch3.subnets : k => v.address_prefixes[0] }, "")
  })

  output_files = {
    "output/server.sh" = local.vm_startup
  }
}

resource "local_file" "main_files" {
  for_each = local.output_files
  filename = each.key
  content  = each.value
}
